"use strict";(self.webpackChunkcomputerization_website=self.webpackChunkcomputerization_website||[]).push([[7326],{7065:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return r},frontMatter:function(){return o},metadata:function(){return a},toc:function(){return l}});var i=t(308),s=t(4997);const o={title:"Git usage guide: understanding working principles of Git",authors:"josh-cena",tags:["git","guide"]},r=void 0,a={permalink:"/en/blog/2020/09/23/git-usage",source:"@site/i18n/en/docusaurus-plugin-content-blog/2020-09-23-git-usage.md",title:"Git usage guide: understanding working principles of Git",description:"This article is migrated from the first section of the README.md file in the new member practice commit repo.",date:"2020-09-23T00:00:00.000Z",formattedDate:"September 23, 2020",tags:[{label:"git",permalink:"/en/blog/tags/git"},{label:"guide",permalink:"/en/blog/tags/guide"}],readingTime:7.025,hasTruncateMarker:!0,authors:[{name:"Josh Cena",title:"Leader of Computerization '22",url:"https://github.com/Josh-Cena",imageURL:"https://github.com/Josh-Cena.png",key:"josh-cena"}],frontMatter:{title:"Git usage guide: understanding working principles of Git",authors:"josh-cena",tags:["git","guide"]},unlisted:!1,prevItem:{title:"Fibonacci sequence",permalink:"/en/blog/2020/10/10/algorithm1"},nextItem:{title:"Welcome",permalink:"/en/blog/2020/09/02/welcome"}},c={authorsImageUrls:[void 0]},l=[{value:"Basic operations: clone, branch, commit, push, pull request",id:"basic-operations-clone-branch-commit-push-pull-request",level:2},{value:"Resolving conflicts",id:"resolving-conflicts",level:2},{value:"Further Reading",id:"further-reading",level:2}];function h(e){const n=Object.assign({blockquote:"blockquote",p:"p",a:"a",h2:"h2",code:"code",em:"em",pre:"pre",strong:"strong",del:"del",ul:"ul",li:"li"},(0,s.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["This article is migrated from the first section of the README.md file in the ",(0,i.jsx)(n.a,{href:"https://github.com/Computerization/New-member-practice-commit",children:"new member practice commit repo"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"You can either add a file via Graphical-User-Interface(GUI)-powered GitHub Desktop or command line. You may begin with GUI, but you will someday get into command lines since they offer better control over your repo. Furthermore, Visual Studio Code users can try out the built-in source control."}),"\n",(0,i.jsx)(n.p,{children:"We find it necessary to tell you what you are actually doing each step instead of having you follow the written instructions mechanically. This especially helps since things hardly go as beautifully as the tutorial expects. This section assumes no prior knowledge of any git operations."}),"\n",(0,i.jsx)(n.p,{children:"You can understand git as a version control system. It keeps track of how each file has been created, modified, and deleted, and the repository owner can switch to any saved version (commit), just like the save files in a game."}),"\n",(0,i.jsx)(n.h2,{id:"basic-operations-clone-branch-commit-push-pull-request",children:"Basic operations: clone, branch, commit, push, pull request"}),"\n",(0,i.jsxs)(n.p,{children:["Suppose there's a repository out on GitHub named ",(0,i.jsx)(n.code,{children:"Hello"}),", created by Alice to host perhaps ",(0,i.jsx)(n.em,{children:"the"})," most famous piece of code in history. Its directory looks like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:".\n\u251c\u2500\u2500 Hello.cpp\n\u2502\n\u251c\u2500\u2500 Contributors.txt\n\u2502\n\u2514\u2500\u2500 README.md\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'// Hello.cpp\n#include <iostream>\nusing namespace std;\nint main() {\n  cout << "Hello world!" << endl;\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"// Contributors.txt\nXiaoLi\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"// README.md\n\n# Hello world\n\nA piece of C++ code that prints `Hello world!`\n"})}),"\n",(0,i.jsxs)(n.p,{children:["View each commmit as a snapshot of the entire repo. In fact it's much more lightweight than a complete copy, but in essence it contains all the information at that moment. And this version can be viewed as commit ",(0,i.jsx)(n.code,{children:"C0"}),". (Every commit has a unique hash that's too long to be human-readable, so ",(0,i.jsx)(n.code,{children:"C0"})," will suffice.) We also call it the ",(0,i.jsx)(n.code,{children:"master"})," branch. ",(0,i.jsxs)(n.em,{children:["A branch is a series of commits that form a linear relationship of succession, with the ",(0,i.jsx)(n.code,{children:"master"}),' branch being the "main" branch. In essence, it\'s a pointer to a commit.']})]}),"\n",(0,i.jsx)("img",{alt:"Git tree 1",src:"/img/blog/2020-09-23/Git-tree-1.png"}),"\n",(0,i.jsxs)(n.p,{children:["Bob the linguist finds this repo. He finds great interest in it, but his strong objection to the clich\xe9d ",(0,i.jsx)(n.code,{children:"Hello world!"})," motivates him to make a contribution. To do this, he needs to download this folder (or repository, as people call it) first. This is basically what ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.em,{children:"cloning"})})," does."]}),"\n",(0,i.jsx)(n.p,{children:"After he has a complete copy of the code on his own machine, Bob sets out to make edits. He updates all three files:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'// Hello.cpp\n#include <iostream>\nusing namespace std;\nint main() {\n  cout << "Bonjour le monde!" << endl;\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"// Contributors.txt\nXiaoLi\nXiaoMing\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"// README.md\n\n# Hello world\n\nA piece of C++ code that prints `Bonjour le monde!`\n"})}),"\n",(0,i.jsxs)(n.p,{children:["And now he needs to send it back to GitHub, as his instinct tells him. This is done by directly making a commit. However there's a critical problem here: ",(0,i.jsx)(n.em,{children:"Alice has zero control over Bob's action"}),". In fact, most public repos (including Computerization's) restrict people from commiting directly to ",(0,i.jsx)(n.code,{children:"master"}),", because there's no point of authentication. Once the commit is made, Alice would be back and surprisedly find her code becoming French. And it's bad practice anyways: ",(0,i.jsx)(n.strong,{children:"In any collaborative repository, never commit directly to master."})," ",(0,i.jsx)(n.del,{children:"(Unless you are resigning in a week)"})," There's another problem with commiting to ",(0,i.jsx)(n.code,{children:"master"}),", which we will shortly see."]}),"\n",(0,i.jsxs)(n.p,{children:["So to fix this problem, Bob ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.em,{children:"creates a new branch"})}),", and names it ",(0,i.jsx)(n.code,{children:"Bob/change-output-language"}),". We may see this as Bob working on a separate but identical folder, and anything he does will not affect ",(0,i.jsx)(n.code,{children:"master"}),". This not only clarifies his purpose, identifies his position as an author, but also prevents conflict and/or confusion."]}),"\n",(0,i.jsxs)(n.p,{children:["He made the said changes. But then he remembered another code of honor: ",(0,i.jsx)(n.strong,{children:"one commit should only serve one purpose"}),". Looking back at his changes, he believes that changing the language and adding his name in the ",(0,i.jsx)(n.code,{children:"Contributors.txt"})," should be separate things (the difference is minute here, but in real projects it gets obvious). Therefore he ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.em,{children:"makes two commits"})})," called ",(0,i.jsx)(n.code,{children:"Change output to French"})," and ",(0,i.jsx)(n.code,{children:"Add Bob's name to Contributors.txt"}),", which will be neatly given hashes ",(0,i.jsx)(n.code,{children:"C1"})," and ",(0,i.jsx)(n.code,{children:"C2"}),". Note he did not necessarily work on them sequentially, but git treats ",(0,i.jsx)(n.code,{children:"C2"})," as a successor of ",(0,i.jsx)(n.code,{children:"C1"})," since it's a more recent commit. Now the branch ",(0,i.jsx)(n.code,{children:"Bob/change-output-language"})," refers to the commit ",(0,i.jsx)(n.code,{children:"C2"}),"."]}),"\n",(0,i.jsx)("img",{alt:"Git tree 2",src:"/img/blog/2020-09-23/Git-tree-2.png"}),"\n",(0,i.jsxs)(n.p,{children:["At this point his changes have remained local -- no one can see it on the GitHub page. So then he ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.em,{children:"publishes the branch and pushes it to the origin"})}),". This uploads this branch, ",(0,i.jsx)(n.code,{children:"Bob/change-output-language"}),", with all the commits it contains, to the GitHub remote."]}),"\n",(0,i.jsx)(n.p,{children:"After he has published the branch, any further commits he makes on this branch will be automatically synchronized with GitHub as well."}),"\n",(0,i.jsxs)(n.p,{children:["Directly after, he ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.em,{children:"makes a pull request"})})," to ask the code owner (a.k.a. Alice) to merge this branch. ",(0,i.jsxs)(n.em,{children:["When a branch is merged, all the changes will now be reflected in ",(0,i.jsx)(n.code,{children:"master"}),"."]})]}),"\n",(0,i.jsxs)(n.p,{children:["This sounds really simple when there's only one branch, because git simply adds everything to ",(0,i.jsx)(n.code,{children:"master"})," when all commits are successors of ",(0,i.jsx)(n.code,{children:"master"}),", which is now ",(0,i.jsx)(n.code,{children:"C0"}),". So Git moves the ",(0,i.jsx)(n.code,{children:"C0"})," pointer:"]}),"\n",(0,i.jsx)("img",{alt:"Git tree 3",src:"/img/blog/2020-09-23/Git-tree-3.png"}),"\n",(0,i.jsx)(n.p,{children:"And in fact, above is all for new git users to understand. But as future GitHub admins, you deserve to think a little deeper."}),"\n",(0,i.jsx)(n.h2,{id:"resolving-conflicts",children:"Resolving conflicts"}),"\n",(0,i.jsxs)(n.p,{children:["So to make thing more fun, Cindy the orthodox comes simultaneously with Bob. Outraged by Alice dropping the ",(0,i.jsx)(n.code,{children:"return 0"})," in the cpp file, she decides to fix it. Similarly, she creates a new branch ",(0,i.jsx)(n.code,{children:"Cindy/improve-code-style"})," from ",(0,i.jsx)(n.code,{children:"master"}),", which at this point is still ",(0,i.jsx)(n.code,{children:"C0"}),". The files are changed as:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'// Hello.cpp\n#include <iostream>\nusing namespace std;\nint main() {\n  cout << "Hello world!" << endl;\n  return 0;\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"// Contributors.txt\nXiaoLi\nXiaoHong\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"// README.md\n\n# Hello world\n\nA piece of C++ code that prints `Hello world!`\n"})}),"\n",(0,i.jsx)(n.p,{children:"She publishes the branch and opens a pull request."}),"\n",(0,i.jsx)("img",{alt:"Git tree 4",src:"/img/blog/2020-09-23/Git-tree-4.png"}),"\n",(0,i.jsx)(n.p,{children:"Alice, after her tea break, comes back to find the two pull requests. She happily merges Bob's one;"}),"\n",(0,i.jsx)("img",{alt:"Git tree 5",src:"/img/blog/2020-09-23/Git-tree-5.png"}),"\n",(0,i.jsxs)(n.p,{children:["but then Cindy's one she can not merge on click of a button. GitHub throws a warning, telling her there's a conflict with ",(0,i.jsx)(n.code,{children:"master"}),". She has to resolve the conflict manually, because git didn't know which version to keep when they are made parallelly. The resolving page shows something like:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'// Hello.cpp\n #include <iostream>\n using namespace std;\n int main() {\n <<<<<<< master\n   cout << "Bonjour le monde!" << endl;\n =======\n   cout << "Hello world!" << endl;\n   return 0;\n >>>>>>> XiaoHong/improve-code-style\n }\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"// Contributors.txt\n XiaoLi\n <<<<<<< master\n XiaoMing\n =======\n XiaoHong\n >>>>>>> XiaoHong/improve-code-style\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note that the README.md file needs no resolution because only Bob had made a change; git is smart enough to realize that. But the above issues are pressing. How to resolve them are pretty apparent to humans like Alice, though, so she quickly fixed these, and merged Cindy's branch with no conflict. The files are now (",(0,i.jsx)(n.code,{children:"C4"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'// Hello.cpp\n#include <iostream>\nusing namespace std;\nint main() {\n  cout << "Bonjour le monde!" << endl;\n  return 0;\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"// Contributors.txt\nXiaoLi\nXiaoMing\nXiaoHong\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"// README.md\n\n# Hello world\n\nA piece of C++ code that prints `Bonjour le monde!`\n"})}),"\n",(0,i.jsx)(n.p,{children:"And to merge a branch into a branch that is not a successor, Git will create a new commit:"}),"\n",(0,i.jsx)("img",{alt:"Git tree 6",src:"/img/blog/2020-09-23/Git-tree-6.png"}),"\n",(0,i.jsx)(n.p,{children:"And Alice, Bob, and Cindy are happy about their successful collaboration over GitHub on an open-source project."}),"\n",(0,i.jsxs)(n.p,{children:["To understand more about git and its tree structure (as already implied above), check this out: ",(0,i.jsx)(n.a,{href:"https://learngitbranching.js.org",children:"Learn Git Branching"})]}),"\n",(0,i.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,i.jsxs)(n.p,{children:["To discover what happens when you ",(0,i.jsx)(n.code,{children:"pull"}),", ",(0,i.jsx)(n.code,{children:"push"}),", ",(0,i.jsx)(n.code,{children:"commit"}),", ",(0,i.jsx)(n.code,{children:"add"}),", or ",(0,i.jsx)(n.code,{children:"checkout"}),", you can refer to the following sites:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://git-scm.com/book/en/v1/Getting-Started-Git-Basics",children:"Git SCM - Getting Started: Git Basics"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell",children:"Git SCM - Git Branching: Branches in a Nutshell"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://git-scm.com/book/en/v2/Git-Branching-Branching-Workflows",children:"Git SCM - Git Branching: Branching Workflows"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://stackoverflow.com/questions/3689838/whats-the-difference-between-head-working-tree-and-index-in-git",children:"Stack Overflow - What's the difference between HEAD, working tree and index, in Git?"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://hackernoon.com/https-medium-com-zspajich-understanding-git-data-model-95eb16cc99f5",children:"Understanding Git: Data Model"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://hackernoon.com/understanding-git-branching-2662f5882f9",children:"Understanding Git: Branching"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://hackernoon.com/understanding-git-index-4821a0765cf",children:"Understanding Git: Index"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Alternatively, if you don't like reading long texts, you can watch this YouTube video (about 82-min long):"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.youtube.com/watch?v=ZDR433b0HJY",children:"[VIDEO] Introduction to Git with Scott Chacon of GitHub"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Or try the commands out on this visualized webpage:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://learngitbranching.js.org",children:"Learn Git Branching"})}),"\n"]})]})}n.default=function(e={}){const{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,i.jsx)(n,Object.assign({},e,{children:(0,i.jsx)(h,e)})):h(e)}},4997:function(e,n,t){t.d(n,{Zo:function(){return a},ah:function(){return o}});var i=t(6677);const s=i.createContext({});function o(e){const n=i.useContext(s);return i.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const r={};function a({components:e,children:n,disableParentContext:t}){let a;return a=t?"function"==typeof e?e({}):e||r:o(e),i.createElement(s.Provider,{value:a},n)}}}]);