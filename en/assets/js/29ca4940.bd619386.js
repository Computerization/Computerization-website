"use strict";(self.webpackChunkcomputerization_website=self.webpackChunkcomputerization_website||[]).push([[8659],{903:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return a},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return u}});var o=n(308),r=n(4997);const i={title:"Livestock Lineup",authors:"josh-cena",tags:["algorithm"]},a=void 0,s={permalink:"/en/blog/2020/12/02/algorithm5",source:"@site/i18n/en/docusaurus-plugin-content-blog/2020-12-02-algorithm5.mdx",title:"Livestock Lineup",description:"This is the fifth activity of Computerization algorithm team. Because the December USACO contest is almost there, we had some targeted practicing, starting with Bronze problems. Because members already have decent understanding, we chose a tough one. Bronze division problems only require mastery of loops, so a brute-force enumaration will always work, with no requirement of algorithms or data structures.",date:"2020-12-02T00:00:00.000Z",formattedDate:"December 2, 2020",tags:[{label:"algorithm",permalink:"/en/blog/tags/algorithm"}],readingTime:4.8,hasTruncateMarker:!0,authors:[{name:"Josh Cena",title:"Leader of Computerization '22",url:"https://github.com/Josh-Cena",imageURL:"https://github.com/Josh-Cena.png",key:"josh-cena"}],frontMatter:{title:"Livestock Lineup",authors:"josh-cena",tags:["algorithm"]},unlisted:!1,prevItem:{title:"OI \u90e8\u6d3b\u52a8-\u7f51\u7edc\u6d41\u95ee\u9898\u4ecb\u7ecd",permalink:"/en/blog/2021/11/24/network-flow"},nextItem:{title:"Factorial string",permalink:"/en/blog/2020/11/04/algorithm3"}},c={authorsImageUrls:[void 0]},u=[];function l(e){const t=Object.assign({p:"p"},(0,r.ah)(),e.components);return(0,o.jsx)(t.p,{children:"This is the fifth activity of Computerization algorithm team. Because the December USACO contest is almost there, we had some targeted practicing, starting with Bronze problems. Because members already have decent understanding, we chose a tough one. Bronze division problems only require mastery of loops, so a brute-force enumaration will always work, with no requirement of algorithms or data structures."})}t.default=function(e={}){const{wrapper:t}=Object.assign({},(0,r.ah)(),e.components);return t?(0,o.jsx)(t,Object.assign({},e,{children:(0,o.jsx)(l,e)})):l(e)}},4997:function(e,t,n){n.d(t,{Zo:function(){return s},ah:function(){return i}});var o=n(6677);const r=o.createContext({});function i(e){const t=o.useContext(r);return o.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}const a={};function s({components:e,children:t,disableParentContext:n}){let s;return s=n?"function"==typeof e?e({}):e||a:i(e),o.createElement(r.Provider,{value:s},t)}}}]);