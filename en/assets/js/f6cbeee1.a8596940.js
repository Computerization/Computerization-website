"use strict";(self.webpackChunkcomputerization_website=self.webpackChunkcomputerization_website||[]).push([[3836],{4641:function(n){n.exports=JSON.parse('{"blogPosts":[{"id":"/2024/09/05/recruitment","metadata":{"permalink":"/en/blog/2024/09/05/recruitment","source":"@site/blog/2024-09-05-recruitment.md","title":"Computerization \'24 | \u62db\u65b0 \xb7 \u5341\u5e74","description":"\u6211\u4eec\u662f\u4e00\u4e2a\u957f\u671f\u5728\u5e55\u540e\u5de5\u4f5c\u7684\uff0c\u4ee5\u9762\u5411\u793e\u56e2\u7684\u77e5\u8bc6\u6027\u670d\u52a1\u4e3a\u4e3b\u7684\uff0c\u4e00\u4e2a\u5c0f\u800c\u7cbe\u7684 CS \u793e\u56e2\u3002\u6211\u4eec\u7684\u5168\u79f0\u662f Computerization\uff0c\u4e16\u5916\u4fe1\u606f\u5316\u793e\uff1b\u4e0d\u8fc7\u6211\u4eec\u66f4\u559c\u6b22\u88ab\u79f0\u4e4b\u4e3a C \u793e\u3002","date":"2024-09-05T00:00:00.000Z","formattedDate":"September 5, 2024","tags":[{"label":"computerization","permalink":"/en/blog/tags/computerization"}],"readingTime":4.09,"hasTruncateMarker":false,"authors":[{"name":"\u6768\u5176\u81fb","title":"\u4fe1\u606f\u5316\u793e 2024-25 \u793e\u957f","url":"https://github.com/q1zhen","imageURL":"https://github.com/q1zhen.png","key":"q1zhen"}],"frontMatter":{"authors":"q1zhen","tags":["computerization"]},"unlisted":false,"nextItem":{"title":"\u7f18\u8d77 | \u8ba1\u7b97\u673a\u79d1\u5b66\u793e\u56e2\u8de8\u6821\u8054\u76df CS Clubs \u6210\u7acb","permalink":"/en/blog/2024/08/26/csclubs"}},"content":"\u6211\u4eec\u662f\u4e00\u4e2a**\u957f\u671f\u5728\u5e55\u540e\u5de5\u4f5c\u7684\uff0c\u4ee5\u9762\u5411\u793e\u56e2\u7684\u77e5\u8bc6\u6027\u670d\u52a1\u4e3a\u4e3b\u7684\uff0c\u4e00\u4e2a\u5c0f\u800c\u7cbe\u7684 CS \u793e\u56e2**\u3002\u6211\u4eec\u7684\u5168\u79f0\u662f Computerization\uff0c\u4e16\u5916\u4fe1\u606f\u5316\u793e\uff1b\u4e0d\u8fc7\u6211\u4eec\u66f4\u559c\u6b22\u88ab\u79f0\u4e4b\u4e3a C \u793e\u3002\\n\\n\u4f5c\u4e3a\u4e00\u4e2a\u6709**\u4e5d\u5e74\u60a0\u4e45\u5386\u53f2**\u7684\u8001\u793e\u56e2\uff0c\u5728 2024 \u5e74\u7684\u4eca\u5929\uff0c\u6211\u4eec\u7ee7\u7eed\u5f00\u542f\u4eca\u5e74\u62db\u65b0\u7684\u5927\u95e8\uff0c\u6b22\u8fce\u52a0\u5165\u6211\u4eec\uff0c\u548c\u6211\u4eec\u5171\u540c\u6253\u9020\u8f89\u714c\u7684\u7b2c\u5341\u5e74\uff01\\n\\n## \u6821\u5185\u6d3b\u52a8\\n\\n\u4f5c\u4e3a\u4e00\u4e2a\u300c\u5168\u80fd\u300d\u7684 CS \u793e\u56e2\uff0c\u6211\u4eec\u628a\u65e5\u5e38\u7684\u6d3b\u52a8\u5206\u4e3a\u4e86 Web, AI, OI \u4e09\u4e2a\u90e8\u95e8\u3002\\n\\n**Web \u90e8**\u662f\u8bb8\u591a\u793e\u56e2\u5927\u9879\u76ee\u7684\u57fa\u77f3\uff0c\u5728\u8fd9\u91cc\u4f60\u53ef\u4ee5\u5b66\u4e60\u5230\u4e30\u5bcc\u7684\u524d\u7aef\u77e5\u8bc6\uff0c\u5728\u7ef4\u62a4\u9879\u76ee\u65f6\u4e5f\u80fd\u63a5\u89e6\u5230\u5927\u91cf\u8fd0\u7ef4\u548c\u540e\u7aef\u7684\u77e5\u8bc6\u3002\u8fd9\u4e2a\u90e8\u95e8\u5c06\u4f1a\u8d1f\u8d23 Enspire \u5e73\u53f0 (\u5b66\u751f\u4f1a\u793e\u56e2\u90e8\u5b98\u65b9\u5408\u4f5c) \u7684\u540e\u7eed\u5f00\u53d1\u7ef4\u62a4\uff0c\u4ee5\u53ca\u5927\u90e8\u5206\u793e\u56e2\u8054\u52a8\u7684\u6d3b\u52a8\u3002\\n\\n\u5728 **AI \u90e8**\uff0c\u4f60\u80fd\u4e0e\u793e\u56e2\u6210\u5458\u4e00\u8d77\u7814\u8ba8\u6700\u524d\u6cbf\u7684\u4eba\u5de5\u667a\u80fd\u8bba\u6587\uff0c\u63a2\u7d22\u6280\u672f\uff0c\u5e76\u4e00\u8d77\u5f00\u53d1\u76f8\u5173\u7684\u5c0f\u9879\u76ee\u3002AI \u90e8\u540c\u6837\u4e5f\u6709\u7740\u4e0e\u5176\u5b83\u793e\u56e2\u4e30\u5bcc\u7684\u5408\u4f5c\u673a\u4f1a\u3002\\n\\n**OI \u90e8**\u7ecf\u8fc7\u4e00\u5e74\u7684\u9759\u9ed8\u4e8e\u4eca\u5e74\u5168\u65b0\u91cd\u542f\uff0c\u4f60\u53ef\u4ee5\u4e0e\u6211\u4eec ~~USACO \u91d1\u724c\u800c\u4e14\u7279\u522b\u80fd\u88c5~~\u7684\u526f\u793e\u4e00\u540c\u8ba8\u8bba\u7b97\u6cd5\u7ade\u8d5b\uff0c\u5e76\u548c\u6210\u5458\u4e00\u8d77\u5907\u6218\u5404\u7c7b\u4fe1\u606f\u5965\u8d5b\u3002\\n\\nEnspire \u662f\u7531\u4e16\u5916\u4fe1\u606f\u5316\u793e\u9886\u5bfc\u7684\u5f00\u6e90\u9879\u76ee\uff0c\u65e8\u5728\u4e3a\u5b66\u6821\u7684 CAS \u6d3b\u52a8\u4e0e\u793e\u56e2\u7ba1\u7406\u63d0\u4f9b\u6280\u672f\u652f\u6301\u5e73\u53f0\uff0c\u53ef\u8ba9\u540c\u5b66\u4eec\u7684 CAS \u751f\u6d3b\u66f4\u52a0\u4fbf\u6377\u9ad8\u6548\u3002Enspire \u7684\u76ee\u6807\u5f88\u7b80\u5355: Make CAS Life Easier for Everyone! \u8fd9\u662f\u4e00\u4e2a\u4f9d\u7167 MIT License \u5b8c\u5168\u5f00\u6e90\u7684\u9879\u76ee\u3002\\n\\n![](/img/blog/2024-09-05/enspire-stats.png)\\n\\n\u6211\u4eec\u540c\u65f6\u4e5f\u4e8e\u4eca\u5e74\u63a8\u51fa\u6211\u4eec\u793e\u56e2\u7684\u793e\u520a `c13n`\uff0c\u5411\u66f4\u591a\u7684\u4eba\u5206\u4eab\u6280\u672f\u3001\u666e\u53ca\u6280\u672f\u3002\\n\\n## \u6821\u5916\u53ca\u56fd\u9645\u5173\u7cfb\\n\\n\u4f5c\u4e3a\u9ad8\u4e2d\u751f\uff0c\u6211\u4eec\u6df1\u77e5\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\uff0c\u4e00\u4e2a\u9ad8\u4e2d\u793e\u56e2\u7684\u5f71\u54cd\u529b\u4e5f\u4ecd\u7136\u5341\u5206\u5c40\u9650\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u4e5f\u5728\u4e0d\u65ad\u5bfb\u6c42\u8de8\u6821\u4ee5\u53ca\u56fd\u9645\u4e0a\u7684\u5f80\u6765\u3002\\n\\nCS Clubs \u662f\u4e00\u4e2a**\u7531\u4e16\u5916\u4fe1\u606f\u5316\u793e\u53d1\u8d77\u3001\u4e00\u7fa4\u70ed\u7231\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u9ad8\u4e2d\u751f\u5171\u540c\u7ec4\u5efa**\u7684\u5168\u7403\u8054\u76df\u3002\u8054\u76df\u7684\u521d\u521b\u6210\u5458\u7531\u6765\u81ea 2 \u4e2a\u56fd\u5bb6\u7684 6 \u4e2a\u8ba1\u7b97\u673a\u76f8\u5173\u793e\u56e2\u7ec4\u6210\u3002\\n\\n\u901a\u8fc7\u5404\u79cd\u5f62\u5f0f\u7684\u5408\u4f5c\uff0c\u6211\u4eec\u529b\u6c42\u8ba9\u66f4\u591a\u9ad8\u4e2d\u7684 CS \u793e\u56e2\u5f97\u5230\u66f4\u4e30\u5bcc\u7684\u673a\u4f1a\u3001\u5f97\u5230\u4e92\u76f8\u7684\u8d44\u6e90\u6574\u5408\uff0c\u5c06\u6700\u5148\u8fdb\u7684\u6280\u672f\u7406\u5ff5\u5f15\u5165\u9ad8\u4e2d\u751f\u7684\u5b66\u4e60\u751f\u6d3b\u3002\\n\\n## \u8fd8\u6709\\n\\n\u6211\u4eec\u7684\u9886\u5bfc\u5c42\u4ee5\u53ca\u793e\u5458\u6709\u7740\u4e0a\u8ff0\u6d3b\u52a8\u4e4b\u5916\u8fdc\u8fdc\u4e30\u5bcc\u7684\u591a\u7684\u6280\u80fd ~~\uff0c\u5c24\u5176\u662f\u4e00\u4f4d\u7cbe\u901a LaTeX / TeX \u7684\u526f\u793e~~\u3002\\n\\n\u5728\u8fd9\u91cc\uff0c\u4f60\u4e0d\u5149\u80fd\u5f97\u5230\u6280\u672f\u7684\u63d0\u5347\uff0c\u8ba4\u8bc6\u4e00\u7fa4\u5fd7\u540c\u9053\u5408\u7684\u4eba\uff0c\u8fd8\u662f\u4e00\u4e2a\u6781\u4e3a\u4f18\u79c0\u7684\u4e2a\u4eba\u5c55\u793a\u5e73\u53f0\uff1a\u4f60\u53ef\u4ee5\u5411\u540c\u5b66\u8bb2\u89e3\u4f60\u6240\u719f\u77e5\u7684\u8ba1\u7b97\u673a\u539f\u7406\uff0c\u5728\u516c\u4f17\u53f7\u3001blog\u3001\u793e\u520a\u4e0a\u5927\u5c55\u8eab\u624b\uff0c\u4e0e\u5176\u5b83\u793e\u56e2\u8054\u52a8\uff0c\u6216\u662f\u5728 Web \u90e8\u9879\u76ee\u534f\u4f5c\u4e2d\u4e3a\u5b66\u6821\u7684\u4fe1\u606f\u5316\u8d21\u732e\u81ea\u5df1\u7684\u529b\u91cf\u3002\\n\\n\u6211\u4eec\u662f\u4e16\u5916\u4fe1\u606f\u5316\u793e\u3002<br/>\\n\u6211\u4eec\u662f\u670d\u52a1\u7c7b\u793e\u56e2\u3002\\n\\n\u52a0\u5165\u6211\u4eec\uff01\u4e00\u8d77\u89c1\u8bc1\u6211\u4eec\u7684\u5341\u5e74\uff01"},{"id":"/2024/08/26/csclubs","metadata":{"permalink":"/en/blog/2024/08/26/csclubs","source":"@site/blog/2024-08-26-csclubs.md","title":"\u7f18\u8d77 | \u8ba1\u7b97\u673a\u79d1\u5b66\u793e\u56e2\u8de8\u6821\u8054\u76df CS Clubs \u6210\u7acb","description":"CS Clubs \u6210\u7acb\u4e86\uff01","date":"2024-08-26T00:00:00.000Z","formattedDate":"August 26, 2024","tags":[{"label":"cs-clubs","permalink":"/en/blog/tags/cs-clubs"}],"readingTime":1.625,"hasTruncateMarker":false,"authors":[{"name":"\u6768\u5176\u81fb","title":"\u4fe1\u606f\u5316\u793e 2024-25 \u793e\u957f","url":"https://github.com/q1zhen","imageURL":"https://github.com/q1zhen.png","key":"q1zhen"}],"frontMatter":{"authors":"q1zhen","tags":["cs-clubs"]},"unlisted":false,"prevItem":{"title":"Computerization \'24 | \u62db\u65b0 \xb7 \u5341\u5e74","permalink":"/en/blog/2024/09/05/recruitment"},"nextItem":{"title":"OI \u90e8\u6d3b\u52a8-\u7f51\u7edc\u6d41\u95ee\u9898\u4ecb\u7ecd","permalink":"/en/blog/2021/11/24/network-flow"}},"content":"CS Clubs \u6210\u7acb\u4e86\uff01\\n\\nCS Clubs \u662f\u4e00\u4e2a\u7531\u4e16\u5916\u4fe1\u606f\u5316\u793e\u53d1\u8d77\u3001\u4e00\u7fa4\u70ed\u7231\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u9ad8\u4e2d\u751f\u5171\u540c\u7ec4\u5efa\u7684\u5168\u7403\u8054\u76df\u3002\u8054\u76df\u7684\u521d\u521b\u6210\u5458\u7531\u6765\u81ea 2 \u4e2a\u56fd\u5bb6\u7684 6 \u4e2a\u8ba1\u7b97\u673a\u76f8\u5173\u793e\u56e2\u7ec4\u6210\u3002\\n\\n\u4f5c\u4e3a\u9ad8\u4e2d\u751f\uff0c\u6211\u4eec\u6df1\u77e5\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\uff0c\u4e00\u4e2a\u4eba\u7684\u529b\u91cf\u662f\u975e\u5e38\u6709\u9650\u7684\uff0c\u800c\u4e00\u4e2a\u9ad8\u4e2d\u793e\u56e2\u7684\u5f71\u54cd\u529b\u4e5f\u4ecd\u7136\u5341\u5206\u5c40\u9650\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u51b3\u5b9a\u8054\u5408\u8d77\u6765\uff0c\u8de8\u8d8a\u5730\u7406\u548c\u6587\u5316\u7684\u969c\u788d\uff0c\u5171\u540c\u5b66\u4e60\u3001\u4ea4\u6d41\u4e92\u9274\u3002\\n\\n\u901a\u8fc7\u5404\u79cd\u5f62\u5f0f\u7684\u5408\u4f5c\uff0c\u6211\u4eec\u529b\u6c42\u8ba9\u66f4\u591a\u9ad8\u4e2d\u7684 CS \u793e\u56e2\u5f97\u5230\u66f4\u4e30\u5bcc\u7684\u673a\u4f1a\u3001\u5f97\u5230\u4e92\u76f8\u7684\u8d44\u6e90\u6574\u5408\uff0c\u5c06\u6700\u5148\u8fdb\u7684\u6280\u672f\u7406\u5ff5\u5f15\u5165\u9ad8\u4e2d\u751f\u7684\u5b66\u4e60\u751f\u6d3b\u3002\\n\\n\u5b98\u7f51 [https://csclubs.org](https://csclubs.org) (\u73b0\u7531 C \u793e\u8fd0\u8425\u7ef4\u62a4) <br/>\\nGitHub [@csclubs](https://github.com/csclubs)\\n\\n## \u6210\u5458\\n\\nCS Clubs \u7531\u6765\u81ea 2 \u4e2a\u56fd\u5bb6\u7684 6 \u4e2a\u9ad8\u4e2d\u8ba1\u7b97\u673a\u79d1\u5b66\u793e\u56e2\u8054\u5408\u521b\u7acb\u3002\\n\\n> **Computerization** <br/>\\n> \u4e16\u754c\u5916\u56fd\u8bed\u4e2d\u5b66\\n> \ud83d\udccdShanghai <br/>\\n> [https://computerization.io](https://computerization.io) <br/>\\n> GitHub [@Computerization](https://github.com/Computerization)\\n\\n> **\u661f\u6cb3\u6e7e CS \u793e** <br/>\\n> \u4e0a\u6d77\u661f\u6cb3\u6e7e\u53cc\u8bed\u5b66\u6821\\n> \ud83d\udccdShanghai\\n\\n> **Lady.Coder** <br/>\\n> YK Pao School\\n> \ud83d\udccdShanghai\\n\\n> **Pomelo Bay \u67da\u5b66\u6e7e** <br/>\\n> YK Pao School\\n> \ud83d\udccdShanghai\\n\\n> **PHCS** <br/>\\n> \u4e0a\u6d77\u6c11\u529e\u5e73\u548c\u5b66\u6821\\n> \ud83d\udccdShanghai\\n\\n> **CyberDragons** <br/>\\n> Dana Hall School\\n> \ud83d\udccdWellesley, MA"},{"id":"/2021/11/24/network-flow","metadata":{"permalink":"/en/blog/2021/11/24/network-flow","source":"@site/blog/2021-11-24-network-flow.md","title":"OI \u90e8\u6d3b\u52a8-\u7f51\u7edc\u6d41\u95ee\u9898\u4ecb\u7ecd","description":"\u5728\u4eca\u5929 C \u793e OI \u90e8\u7684\u6d3b\u52a8\u4e2d\uff0c\u6211\u4eec\u5148\u8fdb\u884c\u4e86\u7834\u51b0\u6d3b\u52a8\u2014\u2014\u81ea\u6211\u4ecb\u7ecd\u5e76\u4ea4\u6d41\u6709\u8da3\u7684\u7b97\u6cd5\u77e5\u8bc6\u3002\u901a\u8fc7\u8fd9\u72ec\u7279\u7684\u5f62\u5f0f\u6211\u4eec\u5f97\u4ee5\u589e\u8fdb\u5bf9\u5f7c\u6b64\u7684\u4e86\u89e3\uff0c\u5e76\u4e3a\u4e4b\u540e\u7684\u5408\u4f5c\u6253\u4e0b\u57fa\u7840\u3002","date":"2021-11-24T00:00:00.000Z","formattedDate":"November 24, 2021","tags":[{"label":"algorithm","permalink":"/en/blog/tags/algorithm"}],"readingTime":12.97,"hasTruncateMarker":true,"authors":[{"name":"\u987e\u6dc7\u5143 Alex","title":"2023 \u5c4a\u7b97\u6cd5\u5c0f\u7ec4\u6210\u5458","url":"https://github.com/phoeniiix1203","imageURL":"https://github.com/phoeniiix1203.png","key":"alex-gu"}],"frontMatter":{"authors":"alex-gu","tags":["algorithm"]},"unlisted":false,"prevItem":{"title":"\u7f18\u8d77 | \u8ba1\u7b97\u673a\u79d1\u5b66\u793e\u56e2\u8de8\u6821\u8054\u76df CS Clubs \u6210\u7acb","permalink":"/en/blog/2024/08/26/csclubs"},"nextItem":{"title":"Livestock Lineup","permalink":"/en/blog/2020/12/02/algorithm5"}},"content":"\u5728\u4eca\u5929 C \u793e OI \u90e8\u7684\u6d3b\u52a8\u4e2d\uff0c\u6211\u4eec\u5148\u8fdb\u884c\u4e86\u7834\u51b0\u6d3b\u52a8\u2014\u2014\u81ea\u6211\u4ecb\u7ecd\u5e76\u4ea4\u6d41\u6709\u8da3\u7684\u7b97\u6cd5\u77e5\u8bc6\u3002\u901a\u8fc7\u8fd9\u72ec\u7279\u7684\u5f62\u5f0f\u6211\u4eec\u5f97\u4ee5\u589e\u8fdb\u5bf9\u5f7c\u6b64\u7684\u4e86\u89e3\uff0c\u5e76\u4e3a\u4e4b\u540e\u7684\u5408\u4f5c\u6253\u4e0b\u57fa\u7840\u3002\\n\\n\u4e4b\u540e\uff0c\u6211\u4eec\u6311\u9009\u4e86\u6700\u611f\u5174\u8da3\u7684\u7f51\u7edc\u6d41\u8fd9\u4e00\u7c7b\u7b97\u6cd5\u95ee\u9898\u8fdb\u884c\u8be6\u7ec6\u7684\u8bb2\u89e3\u3002\u6211\u4eec\u4ece\u7f51\u7edc\u6d41\u56fe\u7684\u57fa\u672c\u6982\u5ff5\u5f00\u59cb\uff0c\u4f8b\u5982**\u6e90\uff0c\u6c47\u70b9**\uff0c**\u5269\u4f59\u5bb9\u91cf**\uff0c**\u6700\u5927\u6d41**\uff0c**\u6700\u5c0f\u5272** \u7b49\u7b49\u3002\u5176\u4e2d\u6700\u4e3a\u8da3\u5473\u7684\u662f**\u6700\u5c0f\u5272**\uff0c\u5176\u5b9a\u4e49\u4e3a\u5220\u53bb\u82e5\u5e72\u6761\u8fb9\u4f7f\u5f97\u67d0\u4e24\u70b9 $(u,v)$ \u4e0d\u4e92\u901a\uff0c\u8fd9\u82e5\u5e72\u6761\u8fb9\u8fb9\u6743\u548c\u7684\u6700\u5c0f\u503c\u3002\\n\\n\u63a5\u4e0b\u6765\u901a\u8fc7\u4e0d\u65ad\u4f18\u5316\u7b97\u6cd5\uff0c\u4f8b\u5982\u7075\u6d3b\u8fd0\u7528 `Edmond-Karp` \u52a8\u80fd\u7b97\u6cd5\uff08\u590d\u6742\u5ea6 $O(nm^2)$ \uff09\uff0c `Dinic` \u7b97\u6cd5\uff08\u590d\u6742\u5ea6 $O(n^2m)$ \uff09\u548c `ISAP` \u7b97\u6cd5\uff08\u590d\u6742\u5ea6 $O(n^2m)$ \uff0c\u4e0d\u9700 BFS \u591a\u6b21\uff09\u3002\u6b64\u5916\u8fd8\u8bb2\u89e3\u4e86\u4e00\u4e2a\u4f18\u7f8e\u7684\u5b9a\u7406\uff1a**\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406**\u3002\u8fd9\u4e00\u5b9a\u7406\u5728\u4e00\u4e9b\u56fe\u8bba\u95ee\u9898\u4e2d\u6709\u7740\u6709\u8da3\u7684\u5e94\u7528\uff1a\\n\\n\x3c!-- truncate --\x3e\\n\\n## \u4f8b\u9898\\n\\n<question>\\n\\n### \\\\[\u6e05\u534e\u96c6\u8bad 2012] \u6700\u5c0f\u751f\u6210\u6811\\n\\n\u7ed9\u5b9a\u4e00\u4e2a\u8fb9\u5e26\u6b63\u6743\u7684\u8fde\u901a\u65e0\u5411\u56fe $G=(V, E)$\uff0c\u5176\u4e2d $N=|V|, M=|E|$\uff0c$N$ \u4e2a\u70b9\u4ece $1$ \u5230 $N$ \u4f9d\u6b21\u7f16\u53f7\uff0c\u7ed9\u5b9a\u4e09\u4e2a\u6b63\u6574\u6570 $u, v$ \u548c $L(u\\\\ne v)$\uff0c\u5047\u8bbe\u73b0\u5728\u52a0\u5165\u4e00\u6761\u8fb9\u6743\u4e3a $L$ \u7684\u8fb9 $(u, v)$\uff0c\u90a3\u4e48\u9700\u8981\u5220\u6389\u6700\u5c11\u591a\u5c11\u6761\u8fb9\uff0c\u624d\u80fd\u591f\u4f7f\u5f97\u8fd9\u6761\u8fb9\u65e2\u53ef\u80fd\u51fa\u73b0\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\uff0c\u4e5f\u53ef\u80fd\u51fa\u73b0\u5728\u6700\u5927\u751f\u6210\u6811\u4e0a\uff1f\\n\\n\u6570\u636e\u8303\u56f4\uff1a $N \\\\le 2 \\\\times 10^4, M \\\\le 2 \\\\times 10^5$\\n\\n</question>\\n\\n\u5982\u679c\u4e00\u6761\u8fb9 $(u, v, L)$ \u4e00\u5b9a\u51fa\u73b0\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\uff0c\u90a3\u4e48\u9700\u8981\u6ee1\u8db3\uff1a\u5373\u4f7f\u628a\u8fb9\u6743 $< L$ \u5f97\u6240\u6709\u8fb9\u8fde\u4e0a\uff0c $u, v$ \u4e5f\u4e0d\u8fde\u901a\uff0c\u90a3\u4e48\u5c31\u5fc5\u987b\u9009\u62e9 $(u, v, L)$\\n\\n\u628a\u7ed9\u5b9a\u8fb9\u7684 $u, v$ \u5206\u522b\u4f5c\u4e3a\u6e90\u6c47\u70b9\uff0c\u539f\u56fe\u4e2d\u6240\u6709 $w < L$ \u7684\u8fb9 $(u, v, w)$ \u8fde\u5165\u7f51\u7edc\u6d41\uff0c\u6ce8\u610f\u662f**\u65e0\u5411\u56fe**\uff0c\u6240\u4ee5\u53cd\u8fb9\u521d\u59cb\u5bb9\u91cf\u4e3a $1$\\n\\n\u6700\u5927\u751f\u6210\u6811\u540c\u7406\uff0c\u91cd\u7f6e\u4e00\u904d\u6d41\u518d\u6c42\u4e00\u904d\uff0c\u7136\u540e\u548c\u4e0a\u4e00\u6b21\u7684\u7b54\u6848\u76f8\u52a0\u8f93\u51fa\u5373\u53ef\\n\\n```cpp\\n// #define ONLINE_JUDGE\\n#include <bits/stdc++.h>\\nusing namespace std;\\nconst int Inf = 0x3f3f3f3f;\\ntypedef pair<int, int> pii;\\ntypedef long long ll;\\ntypedef std::string str;\\ntypedef double db;\\n#define pbk push_back\\n#define mk_pr make_pair\\n#define elif else if\\n#define IL inline\\n#define IT(i, lim) for (int i = 1; i <= lim; ++i)\\n#define MST(x, k) memset(x, k, sizeof(x))\\n#define QMST(a, k, sz) memset(a, k, sizeof(int) * (sz + 2))\\n#ifndef ONLINE_JUDGE\\n#define DBG(x) std::cerr << #x << \\" = \\" << x << \\" \\";\\n#define ETR std::cerr << endl;\\n#define DBG_S(k)                                                      \\\\\\n    std::cerr << #k << \\" = \\" << std::bitset<8>(k) << \\" (\\" << k << \\")\\" \\\\\\n              << std::endl;\\n#else\\n#define DBG(x)\\n#define DBG_S(k)\\n#define ETR\\n#endif\\n\\ntemplate <class T>\\nvoid Mx(T &x, T y)\\n{\\n    x = x > y ? x : y;\\n}\\n\\ntemplate <class T>\\nvoid Mn(T &x, T y) { x = x < y ? x : y; }\\n\\ninline void Read(const std::string &name = \\"a\\")\\n{\\n#ifndef ONLINE_JUDGE\\n    freopen((name + \\".in\\").c_str(), \\"r\\", stdin);\\n    // freopen((name + \\".out\\").c_str(), \\"w\\", stdout);\\n    freopen((name + \\".log\\").c_str(), \\"w\\", stderr);\\n#endif\\n    ios::sync_with_stdio(0);\\n    cin.tie(0);\\n    cout.tie(0);\\n}\\n\\nvoid Solve();\\n\\nsigned main()\\n{\\n    Read();\\n    Solve();\\n    return 0;\\n}\\n\\nconst int M = 2e5 + 5;\\n// const int p = ;\\nstruct Ed\\n{\\n    int v, n, w;\\n    Ed(int v_ = 0, int n_ = 0, int w_ = 0) : v(v_), n(n_), w(w_){};\\n};\\n\\nEd e[M << 1];\\nint hd[M << 1], t_e = 1;\\ninline void Add(int u = 0, int v = 0, int w = 0)\\n{\\n    e[++t_e] = Ed(v, hd[u], w);\\n    hd[u] = t_e;\\n}\\n\\nIL void Link(int u, int v, int w = 1)\\n{\\n    Add(u, v, w);\\n    Add(v, u, w);\\n}\\n\\nint h[M];\\n\\nIL bool Bfs(int s, int t)\\n{\\n    memset(h, 0, sizeof(h));\\n    queue<int> q;\\n    q.push(s);\\n    h[s] = 1;\\n    while (!q.empty())\\n    {\\n        int u = q.front();\\n        q.pop();\\n        for (int i = hd[u]; i; i = e[i].n)\\n        {\\n            int v = e[i].v;\\n            if (e[i].w && !h[v])\\n            {\\n                h[v] = h[u] + 1;\\n                q.push(v);\\n            }\\n        }\\n    }\\n    return h[t];\\n}\\n\\nint Dfs(int u, int t, int i_f = Inf)\\n{\\n    if (u == t)\\n        return i_f;\\n    int tof = 0;\\n    for (int i = hd[u]; i && i_f; i = e[i].n)\\n    {\\n        int v = e[i].v;\\n        if (e[i].w && h[v] == h[u] + 1)\\n        {\\n            int cof = Dfs(v, t, min(e[i].w, i_f));\\n            if (!cof)\\n            {\\n                h[v] = -1;\\n                continue;\\n            }\\n            e[i].w -= cof;\\n            e[i ^ 1].w += cof;\\n            i_f -= cof;\\n            tof += cof;\\n        }\\n    }\\n    return tof;\\n}\\n\\nIL int Dinic(int s, int t)\\n{\\n    int mx_f = 0;\\n    while (Bfs(s, t))\\n        mx_f += Dfs(s, t);\\n    return mx_f;\\n}\\n\\nint u_[M], v_[M], w_[M];\\nvoid Clear()\\n{\\n    t_e = 1;\\n    MST(hd, 0);\\n}\\n\\nvoid Solve()\\n{\\n    int n, m;\\n    cin >> n >> m;\\n    IT(i, m)\\n    cin >> u_[i] >> v_[i] >> w_[i];\\n    int s, t, L;\\n    cin >> s >> t >> L;\\n    IT(i, m)\\n    if (w_[i] < L)\\n        Link(u_[i], v_[i]);\\n    int ans = Dinic(s, t);\\n    Clear();\\n    IT(i, m)\\n    if (w_[i] > L)\\n        Link(u_[i], v_[i]);\\n    cout << ans + Dinic(s, t);\\n}\\n```\\n\\n<question>\\n\\n### \\\\[SHOI2010] \u6700\u5c0f\u751f\u6210\u6811\\n\\n\u7ed9\u5b9a\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u8981\u6c42\u8fb9 $L_{a, b}$ \u5fc5\u987b\u5728 MST \u4e2d\uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u9009\u5b9a\u4e00\u6761\u8fb9 $(u, v)$ \u518d\u5c06\u56fe\u4e2d\u6240\u6709\u9664\u8fd9\u6761\u8fb9\u5916\u7684\u8fb9\u7684\u6743\u503c\u51cf\u5c11 $1$ \uff0c\u6c42\u6700\u5c11\u64cd\u4f5c\u51e0\u6b21\\n\\n\u6570\u636e\u8303\u56f4\uff1a $n \\\\le 500, m \\\\le 800$\\n\\n</question>\\n\\n\u7c7b\u4f3c\u6e05\u534e\u96c6\u8bad\u9898\u76ee\u7684\u505a\u6cd5\uff0c\u6bcf\u6b21\u90fd\u9009\u62e9\u4e00\u6761\u8fb9\u6743\u5c0f\u4e8e\u7b49\u4e8e $L_{a, b}$ \u7684\u8fb9 $(u, v, w)$ \u64cd\u4f5c\uff0c\u5219\u64cd\u4f5c $L_{a, b} - w + 1$ \u6b21\u540e\u8fd9\u6761\u8fb9\u5c31\u4e0d\u6bd4 $L_{a, b}$ \u4f18\u4e86\u3002\u53e6\u4e00\u79cd\u7406\u89e3\uff1a\u6bcf\u6b21\u9009\u62e9\u5176\u4ed6\u8fb9 $-1$ \u76f8\u5f53\u4e8e\u81ea\u5df1 $+1$\\n\\n<question>\\n\\n### \\\\[ZJOI2009] \u72fc\u548c\u7f8a\u7684\u6545\u4e8b\\n\\n\u7ed9\u5b9a $n \\\\times m$ \u77e9\u9635\uff0c\u6bcf\u4e2a\u65b9\u683c\u53ef\u80fd\u662f\u72fc\u7f8a\u6216\u7a7a\u683c\u5b50\uff0c\u6c42\u72fc\u7f8a\u4e0d\u76f8\u90bb\u6700\u5c11\u9700\u8981\u4fee\u5efa\u7684\u7bf1\u7b06\u6570\\n\\n\u6570\u636e\u8303\u56f4\uff1a $n, m \\\\le 100$\\n\\n</question>\\n\\n\u6e90\u70b9\u5411\u72fc\u8fde\u5bb9\u91cf\u4e3a $\\\\infin$ \u7684\u8fb9\uff0c\u7f8a\u5411\u6c47\u70b9\u8fde\u5bb9\u91cf\u4e3a $\\\\infin$ \u7684\u8fb9\uff0c\u6240\u6709\u70b9\u5411\u4e0a\u4e0b\u5de6\u53f3\u8fde\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\uff0c\u6c42\u89e3\u6700\u5c0f\u5272\u5373\u662f\u7b54\u6848\\n\\n<question>\\n\\n### \\\\[SCOI2007] \u8725\u8734\\n\\n$r \\\\times c$ \u7684\u77e9\u9635\u6bcf\u4e2a\u4f4d\u7f6e\u6709\u9ad8\u5ea6\u503c $h_{i, j}$ \u3002\u67d0\u4e9b\u4f4d\u7f6e\u6709\u8725\u8734\u3002\u8725\u8734\u6bcf\u8df3\u52a8\u4e00\u6b21\u51fa\u53d1\u4f4d\u7f6e\u9ad8\u5ea6 $-1$ \u3002\u7ed9\u5b9a\u6bcf\u6b21\u8725\u8734\u6700\u5927\u8df3\u52a8\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb $d$ \u6c42\u6709\u591a\u5c11\u8725\u8734\u4e0d\u80fd\u9003\u51fa\u77e9\u9635\\n\\n\u6570\u636e\u8303\u56f4\uff1a $r, c \\\\le 20, d \\\\le 4, h\\\\le 3$\\n\\n</question>\\n\\n\u53ea\u9700\u62c6\u70b9\u77f3\u67f1\uff0c\u4e0d\u5fc5\u628a\u8725\u8734\u5355\u72ec\u62c6\u70b9\uff0c\u6e90\u70b9\u5411\u6709\u8725\u8734\u7684\u70b9 $u$ \u8fde\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\uff08**\u4e0d\u662f** $\\\\infin$ \uff09\uff0c\u80fd\u591f\u8df3\u51fa\u53bb\u7684\u70b9 $u\'$ \u5411\u6c47\u70b9\u8fde\u5bb9\u91cf\u4e3a $\\\\infin$ \u7684\u8fb9\uff0c $u$ \u548c $u\'$ \u4e4b\u95f4\u8fde\u5bb9\u91cf\u4e3a $h_{i, j}$ \u7684\u8fb9\\n\\n\u7528\u5e73\u65b9\u907f\u514d\u5b9e\u6570\u8fd0\u7b97\\n\\n```cpp\\n#define IN(x) (x)\\n#define OUT(x) (x + r * c)\\n\\nint C21(int x, int y) { return (x - 1) * c + y; }\\n\\n#define POW2(x) (x * x)\\n\\nint Dis(int x_1, int y_1, int x_2, int y_2) {\\n    return POW2((x_1 - x_2)) + POW2((y_1 - y_2));\\n}\\n\\nvoid Solve() {\\n    Add();\\n    cin >> r >> c >> d;\\n    int s = 0, t = r * c * 2 + 1;\\n    IT(i, r) {\\n        str S;\\n        cin >> S;\\n        S = \' \' + S;\\n        IT(j, c) {\\n            int w = S[j] - \'0\';\\n            int u = C21(i, j);\\n            if (!w) continue;\\n            Link(IN(u), OUT(u), w);\\n            IT(k, r) {\\n                IT(l, c) {\\n                    if (Dis(i, j, k, l) <= d * d) {\\n                        int v = C21(k, l);\\n                        Link(OUT(u), IN(v), Inf);\\n                    }\\n                }\\n            }\\n            if (i - d < 1 || j - d < 1 || i + d > r || j + d > c) {\\n                Link(OUT(u), t, Inf);\\n            }\\n        }\\n    }\\n    int t_lizard = 0;\\n    IT(i, r) {\\n        IT(j, c) {\\n            char ch;\\n            cin >> ch;\\n            if (ch == \'L\') {\\n                ++t_lizard;\\n                int u = C21(i, j);\\n                Link(s, IN(u), 1);\\n            }\\n        }\\n    }\\n    while (Bfs(s, t)) {\\n        mx_f += Dfs(s, t, Inf);\\n    }\\n    cout << t_lizard - mx_f;\\n}\\n```\\n\\n\u6700\u540e\u6211\u4eec\u8fd8\u901a\u8fc7\u5b9e\u6218\uff0c\u8bb2\u8ff0\u4e86\u5982\u4f55\u4f7f\u7528\u7f51\u7edc\u6d41\u5efa\u6a21\u5e76\u89e3\u51b3\u4e00\u4e9b\u7ecf\u5178\u95ee\u9898\uff0c\u4f8b\u5982**\u4e8c\u5206\u56fe\u5339\u914d\u95ee\u9898\uff0c\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898\u548c\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u95ee\u9898**\u3002\u5176\u4e2d\u5c24\u4e3a\u6709\u8da3\u7684\u662f**\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe**\u95ee\u9898\\n\\n## \u5b9a\u4e49\\n\\n\u5982\u679c\u4e00\u4e2a\u70b9\u88ab\u9009\u62e9\u4e86\u5219\u540e\u7ee7\u5fc5\u987b\u88ab\u9009\u62e9\uff0c\u90a3\u4e48\u79f0\u8be5\u56fe\u662f**\u95ed\u5408**\u7684\\n\\n\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u9009\u62e9\u4e00\u4e2a\u70b9\u5c31\u5fc5\u987b\u9009\u62e9\u5176\u540e\u7ee7\u70b9\uff0c\u4e14\u9009\u62e9\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u82b1\u8d39\u6216\u8005\u5956\u52b1\u3002\u6c42\u603b\u5956\u52b1\u6700\u5927\u503c\\n\\n## \u89e3\u6cd5\\n\\n1. \u6e90\u70b9\u5411\u6240\u6709\u6b63\u6743\u70b9\u8fde\u7ed3\u4e00\u6761\u5bb9\u91cf\u4e3a\u6743\u503c\u7684\u8fb9\\n2. \u4fdd\u7559\u539f\u56fe\u4e2d\u6240\u6709\u7684\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u6b63\u65e0\u7a77\\n3. \u6240\u6709\u8d1f\u6743\u70b9\u5411\u6c47\u70b9\u8fde\u7ed3\u4e00\u6761\u5bb9\u91cf\u4e3a\u6743\u503c\u7edd\u5bf9\u503c\u7684\u8fb9\\n\\n\u7531\u4e8e\u539f\u56fe\u4e2d\u7684\u8fb9\u5168\u90e8\u662f\u6b63\u65e0\u7a77\uff0c**\u6700\u5c0f\u5272\u53ea\u4f1a\u5272\u6389\u6e90\u70b9\u548c\u6b63\u6743\u70b9\u4e4b\u95f4\u6216\u8d1f\u6743\u70b9\u548c\u6c47\u70b9\u4e4b\u95f4\u7684\u8fb9**\\n\\n\u5219\u539f\u56fe\u7684\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u70b9\u6743\u548c\u5373\u4e3a\u6240\u6709\u6b63\u6743\u70b9\u6743\u503c\u4e4b\u548c\u51cf\u53bb\u5efa\u51fa\u7684\u7f51\u7edc\u6d41\u56fe\u7684\u6700\u5c0f\u5272\\n\\n<question>\\n\\n### \\\\[\u7f51\u7edc\u6d41 24 \u9898] \u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898\\n\\n[P2762](https://www.luogu.com.cn/problem/P2762)\\n\\n</question>\\n\\n- \u6a21\u7248\u9898\uff0c\u8981\u6c42\u8f93\u51fa\u9009\u62e9\u70b9\u7684\u65b9\u6848\\n- \u6700\u540e\u4e00\u6b21 BFS \u540e `dep` \u4e0d\u4e3a $0$ \u5373\u662f\u88ab\u9009\u62e9/\u6ca1\u6709\u5272\u6389\u7684\u70b9\uff0c\u8f93\u51fa\u8fd9\u4e9b\u70b9\u5373\u53ef\\n\\n<question>\\n\\n### \\\\[ARC085C] MUL\\n\\n[ARC085C](https://www.luogu.com.cn/problem/AT3672)\\n\\n$n$ \u4e2a\u7403\u7f16\u53f7 $1$ \u5230 $n$ \uff0c\u6bcf\u4e2a\u7403\u6709\u4ef7\u503c $w_i$ \uff0c\u53ef\u4ee5\u8fdb\u884c\u4efb\u610f\u6b21\u64cd\u4f5c\uff0c\u5c06\u6240\u6709\u7f16\u53f7\u4e3a $x$ \u7684\u500d\u6570\u7684\u7403\u62ff\u8d70\uff0c\u6c42\u6700\u540e\u5269\u4e0b\u7684\u7403\u7684\u6700\u5927\u603b\u4ef7\u503c\\n\\n\u6570\u636e\u8303\u56f4\uff1a $n \\\\le 100, |w_i| \\\\le 10^9$\\n\\n</question>\\n\\n\u6bcf\u4e2a\u7403\u5411\u7f16\u53f7\u4e3a\u5176\u500d\u6570\u7684\u7403\u8fde\u8fb9\uff0c\u8fd9\u6837\u8fb9\u6570\u662f $O(n \\\\log n)$ \u7ea7\u522b\u7684\\n\\n\u5c06\u6240\u6709 $w_i < 0$ \u7684\u7403\u7684\u82b1\u8d39\u7edd\u5bf9\u503c\u52a0\u548c\uff0c\u7136\u540e\u53cd\u8f6c\u5173\u7cfb\u8fde\u8fb9\uff0c\u8fd9\u6837\u6c42\u51fa\u6765\u7684\u662f\u80fd\u51cf\u5c11\u7684\u82b1\u8d39\u7684\u6700\u5927\u503c\uff0c\u6700\u540e\u51cf\u4e00\u4e0b\u5f97\u5230\u7b54\u6848\\n\\n```cpp\\nvoid Solve()\\n{\\n    int n;\\n    cin >> n;\\n    int tot_cost = 0, tot_w = 0;\\n    int s = 0, t = n + 1;\\n    IT(i, n)\\n    {\\n        int w;\\n        cin >> w;\\n        tot_w += w;\\n        if (w < 0)\\n        {\\n            tot_cost += -w;\\n            Link(s, i, -w);\\n        }\\n        else\\n        {\\n            Link(i, t, w);\\n        }\\n        for (int j = 2; j * i <= n; ++j)\\n            Link(i, j * i, Inf);\\n    }\\n    int mx_reduce_cost = tot_cost - Dinic(s, t);\\n    cout << tot_w + mx_reduce_cost;\\n}\\n```\\n\\n<question>\\n\\n### Petya and Graph\\n\\n[CF1082G](https://www.luogu.com.cn/problem/CF1082G)\\n\\n\u5b9a\u4e49\u56fe\u6743 = \u56fe\u4e2d\u8fb9\u6743\u603b\u548c \u2212 \u56fe\u4e2d\u70b9\u6743\u603b\u548c\uff08\u7a7a\u56fe\u7684\u56fe\u6743 = 0\uff09\uff0c\u6c42 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\u6700\u5927\u6743\u5b50\u56fe\u3002\\n\\n\u6570\u636e\u8303\u56f4\uff1a $n, m \\\\le 10^3$\\n\\n</question>\\n\\n\u4e00\u6761\u8fb9\u7684\u5956\u52b1\u80fd\u88ab\u83b7\u5f97\u5f53\u4e14\u4ec5\u5f53\u4e24\u8fb9\u7684\u70b9\u90fd\u88ab\u9009\u4e0a\\n\\n\u70b9\u8fde\u6c47\uff0c\u8fb9\u8fde\u6e90\\n\\n```cpp\\n#define GOOD(i) (i)\\n#define BUYER(i) (i + n)\\nvoid Solve()\\n{\\n    int n, m;\\n    cin >> n >> m;\\n    int s = 0, t = n + m + 1;\\n    IT(i, n)\\n    {\\n        int p;\\n        cin >> p;\\n        Link(GOOD(i), t, p);\\n    }\\n    int ans = 0;\\n    IT(i, m)\\n    {\\n        int a, b, c;\\n        cin >> a >> b >> c;\\n        Link(s, BUYER(i), c);\\n        Link(BUYER(i), GOOD(a), Inf);\\n        Link(BUYER(i), GOOD(b), Inf);\\n        ans += c;\\n    }\\n    cout << ans - Dinic(s, t);\\n}\\n```\\n\\n<question>\\n\\n### \\\\[TJOI2010] \u7535\u5f71\u8ff7\\n\\n\u6269\u5c55\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u95ee\u9898\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u9650\u5236\u53ef\u4ee5\u82b1\u8d39\u4e00\u5b9a\u4ee3\u4ef7 $w_i$ \u5220\u53bb\\n\\n</question>\\n\\n\u6bcf\u4e2a\u539f\u56fe\u4e0a\u7684\u8fb9\u5bb9\u91cf\u4e0d\u518d\u662f $\\\\infty$ \u800c\u662f $w_i$ \uff0c\u5176\u4f59\u4e0d\u53d8\u6c42\u89e3\u5373\u53ef\\n\\n```cpp\\nvoid Solve()\\n{\\n    int n, m;\\n    cin >> n >> m;\\n    int s = 0, t = n + 1;\\n    int ans = 0;\\n    IT(i, n)\\n    {\\n        int w;\\n        cin >> w;\\n        if (w > 0)\\n        {\\n            ans += w;\\n            Link(s, i, w);\\n        }\\n        else\\n            Link(i, t, -w);\\n    }\\n    IT(i, m)\\n    {\\n        int u, v, w;\\n        cin >> u >> v >> w;\\n        Link(u, v, w);\\n    }\\n    cout << ans - Dinic(s, t);\\n\\n```\\n\\n\u6211\u4eec\u6bcf\u4e2a\u4eba\u90fd\u7ed9\u51fa\u4e86\u975e\u5e38\u72ec\u7279\u7684\u60f3\u6cd5\u4e0e\u89c1\u89e3\uff0c\u7ed9\u4e88\u4e86\u4e00\u9053\u666e\u901a\u7684\u7b97\u6cd5\u9898\u4e0d\u4e00\u6837\u7684\u610f\u4e49\u3002OI \u90e8\u7684\u7b2c\u4e00\u6b21\u6d3b\u52a8\u5f88\u5145\u5b9e\u4e5f\u5f88\u5feb\u4e50\u3002"},{"id":"/2020/12/02/algorithm5","metadata":{"permalink":"/en/blog/2020/12/02/algorithm5","source":"@site/i18n/en/docusaurus-plugin-content-blog/2020-12-02-algorithm5.mdx","title":"Livestock Lineup","description":"This is the fifth activity of Computerization algorithm team. Because the December USACO contest is almost there, we had some targeted practicing, starting with Bronze problems. Because members already have decent understanding, we chose a tough one. Bronze division problems only require mastery of loops, so a brute-force enumaration will always work, with no requirement of algorithms or data structures.","date":"2020-12-02T00:00:00.000Z","formattedDate":"December 2, 2020","tags":[{"label":"algorithm","permalink":"/en/blog/tags/algorithm"}],"readingTime":4.8,"hasTruncateMarker":true,"authors":[{"name":"Josh Cena","title":"\u4fe1\u606f\u5316\u793e 2022 \u5c4a\u793e\u957f","url":"https://github.com/Josh-Cena","imageURL":"https://github.com/Josh-Cena.png","key":"josh-cena"}],"frontMatter":{"title":"Livestock Lineup","authors":"josh-cena","tags":["algorithm"]},"unlisted":false,"prevItem":{"title":"OI \u90e8\u6d3b\u52a8-\u7f51\u7edc\u6d41\u95ee\u9898\u4ecb\u7ecd","permalink":"/en/blog/2021/11/24/network-flow"},"nextItem":{"title":"Factorial string","permalink":"/en/blog/2020/11/04/algorithm3"}},"content":"This is the fifth activity of Computerization algorithm team. Because the December USACO contest is almost there, we had some targeted practicing, starting with Bronze problems. Because members already have decent understanding, we chose a tough one. Bronze division problems only require mastery of loops, so a brute-force enumaration will always work, with no requirement of algorithms or data structures.\\n\\n\x3c!--truncate--\x3e\\n\\nexport const Question = ({ children, color }) => (\\n  <div\\n    style={{\\n      backgroundColor: color,\\n      borderRadius: \\"10px\\",\\n      color: \\"#fff\\",\\n      padding: \\"1em\\",\\n      marginBottom: \\"1em\\",\\n      marginTop: \\"1em\\",\\n    }}>\\n    {children}\\n  </div>\\n);\\n\\n## Problem\\n\\n<Question color=\\"#1d85c2\\">\\n\\n**Problem source: **<a href=\\"http://www.usaco.org/index.php?page=viewproblem2&cpid=965\\">**USACO 2019 December Bronze 3**</a>\\n\\nEvery day, Farmer John milks his 8 dairy cows, named Bessie, Buttercup, Belinda, Beatrice, Bella, Blue, Betsy, and Sue.\\n\\nThe cows are rather picky, unfortunately, and require that Farmer John milks them in an order that respects $N$ constraints. Each constraint is of the form \\"$X$ must be milked beside $Y$\\", stipulating that cow $X$ must appear in the milking order either directly after cow $Y$ or directly before cow $Y$.\\n\\nPlease help Farmer John determine an ordering of his cows that satisfies all of these required constraints. It is guaranteed that an ordering is always possible. If several orderings work, then please output the one that is alphabetically first. That is, the first cow should have the alphabetically lowest name of all possible cows that could appear first in any valid ordering. Among all orderings starting with this same alphabetically-first cow, the second cow should be alphabetically lowest among all possible valid orderings, and so on.\\n\\n| Input constraints | Memory limit | Execution time |\\n| ----------------- | ------------ | -------------- |\\n| $1\\\\le N\\\\le 7$     | 256MB        | 2.0s           |\\n\\n</Question>\\n\\n## Solution\\n\\nOnce we understand what the problem asks for\u2014generating a permutation with the smallest lexicographical order that satisfies the given constraints\u2014it should not be too hard. We can generate all permutations in lexicographical order (there are $8!=40320$ of them), and output the first that satisfies all constraints. If you don\'t know about backtracking algorithm, you can still get assistance from the `next_permutation` function provided by `algorithm`. This is a typical Bronze solution: because of the small input size, we can _choose_ a solution after an enumeration instead of _constructing_ one.\\n\\nHowever, this approach may be less obvious to some experienced candidates. These candidates will attempt to construct a solution through the constraints. This needs some greedy strategy: to achieve the lowest lexicographical order, we need to have the smallest cow possible at every position. We can view an ordering as a \\"constraint chain\\", where every cow has only one possible location due to the cows that it must be adjacent to. After joining each chain, we can choose the smallest cow that hasn\'t been settled yet\u2014but this cow cannot have two unmet constraints, since the cows at both ends of a chain can only be connected to one neighboring cow. After fixing the chain\'s head, we can naturally generate the entire chain. Repeat the same process until all cows have been settled.\\n\\n## Program\\n\\nBrute-force enumeration:\\n\\n```cpp\\n/**\\n * Adopted from official solution at\\n * http://www.usaco.org/current/data/sol_lineup_bronze_dec19.html\\n */\\n#include <iostream>\\n#include <fstream>\\n#include <vector>\\n#include <algorithm>\\n\\nusing namespace std;\\n\\nstring names[8] = {\\"Beatrice\\", \\"Belinda\\", \\"Bella\\", \\"Bessie\\", \\"Betsy\\", \\"Blue\\", \\"Buttercup\\", \\"Sue\\"};\\n// beside_a[i] and beside_b[i] denote one pair of neighboring cows\\nvector<string> beside_a, beside_b;\\nint n;\\n\\nint getID(string name) {\\n    for (int i = 0; i < 8; i++)\\n        if (names[i] == name)\\n            return i;\\n    return -1;\\n}\\n\\nbool satisfies_constraints() {\\n    for (int i = 0; i < n; i++)\\n        if (abs(getID(beside_a[i]) - getID(beside_b[i])) != 1)\\n            return false;\\n    return true;\\n}\\n\\nint main() {\\n    ifstream fin(\\"lineup.in\\");\\n    ofstream fout(\\"lineup.out\\");\\n    fin >> n;\\n    string a, b;\\n    for (int i = 0; i < n; i++) {\\n        fin >> a >> b >> b >> b >> b >> b;\\n        beside_a.push_back(a);\\n        beside_b.push_back(b);\\n    }\\n    // Iterate over all permutations of the 8 cows, and output the first valid solution\\n    do {\\n        if (satisfies_constraints()) {\\n            for (int i = 0; i < 8; i++)\\n                fout << names[i] << endl;\\n            return 0;\\n        }\\n    } while (next_permutation(names.begin(), names.end()));\\n    return 0;\\n}\\n```\\n\\nConstruction:\\n\\n```cpp\\n#include <iostream>\\n#include <fstream>\\n\\nusing namespace std;\\n\\nstruct cow {\\n    int adj[2];  // ID(s) of the cow(s) that need to be neighboring this cow\\n    int adjcnt;  // Number of constraints for this cow; decides if this cow can be put at the head of a constraint chain.\\n    bool chosen; // If already in the ordering\\n} cows[8];\\nstring names[8] = {\\"Beatrice\\", \\"Belinda\\", \\"Bella\\", \\"Bessie\\", \\"Betsy\\", \\"Blue\\", \\"Buttercup\\", \\"Sue\\"};\\n\\nint getID(string name) {\\n    for(int i = 0; i < 8; i++)\\n        if(names[i] == name)\\n            return i;\\n    return -1;\\n}\\n\\nint main() {\\n    ifstream fin(\\"lineup.in\\");\\n    ofstream fout(\\"lineup.out\\");\\n    int n;\\n    fin >> n;\\n    string a, b;\\n    for (int i = 0; i < n; i++) {\\n        fin >> a >> b >> b >> b >> b >> b;\\n        cows[getID(a)].adj[cows[getID(a)].adjcnt++] = getID(b);\\n        cows[getID(b)].adj[cows[getID(b)].adjcnt++] = getID(a);\\n    }\\n    int prev = -1;\\n    // On every iteration add a cow to the ordering. If the last cow has no additional constraints, we may choose a new one; otherwise, we need to choose the one that the constraint requires.\\n    for (int _ = 0; _ < 8; _++) {\\n        if (_ == 0 || cows[prev].adjcnt == 0) {\\n            for (int i = 0; i < 8; i++) {\\n                if (!cows[i].chosen && cows[i].adjcnt < 2) {\\n                    cows[i].chosen = true;\\n                    fout << names[i] << endl;\\n                    prev = i;\\n                    break;\\n                }\\n            }\\n        } else if (cows[prev].adjcnt == 1) {\\n            int i = cows[prev].adj[0];\\n            cows[i].chosen = true;\\n            // Add cow[i] to the ordering, and \\"delete\\" the constraint already satisfied\\n            cows[i].adjcnt--;\\n            if(cows[i].adj[0] == prev)\\n                cows[i].adj[0] = cows[i].adj[1];\\n            fout << names[i] << endl;\\n            prev = i;\\n        }\\n    }\\n    return 0;\\n}\\n```"},{"id":"/2020/11/04/algorithm3","metadata":{"permalink":"/en/blog/2020/11/04/algorithm3","source":"@site/i18n/en/docusaurus-plugin-content-blog/2020-11-04-algorithm3.mdx","title":"Factorial string","description":"This is the first activity of Computerization algorithm team. We discussed a problem from Shanghai NOI regional selection, which leverages state compression dynamic programming. The mathematics is beyond our capacity to be rigorously proven.","date":"2020-11-04T00:00:00.000Z","formattedDate":"November 4, 2020","tags":[{"label":"algorithm","permalink":"/en/blog/tags/algorithm"}],"readingTime":3.125,"hasTruncateMarker":true,"authors":[{"name":"DoremySwee","title":"2022 \u5c4a\u7b97\u6cd5\u5c0f\u7ec4\u6210\u5458","url":"https://github.com/DoremySwee","imageURL":"https://github.com/DoremySwee.png","key":"doremyswee"}],"frontMatter":{"title":"Factorial string","authors":"doremyswee","tags":["algorithm"]},"unlisted":false,"prevItem":{"title":"Livestock Lineup","permalink":"/en/blog/2020/12/02/algorithm5"},"nextItem":{"title":"Fibonacci sequence","permalink":"/en/blog/2020/10/10/algorithm1"}},"content":"This is the first activity of Computerization algorithm team. We discussed a problem from Shanghai NOI regional selection, which leverages state compression dynamic programming. The mathematics is beyond our capacity to be rigorously proven.\\n\\n\x3c!--truncate--\x3e\\n\\nexport const Question = ({ children, color }) => (\\n  <div\\n    style={{\\n      backgroundColor: color,\\n      borderRadius: \\"10px\\",\\n      color: \\"#fff\\",\\n      padding: \\"1em\\",\\n      marginBottom: \\"1em\\",\\n      marginTop: \\"1em\\",\\n    }}>\\n    {children}\\n  </div>\\n);\\n\\n## Problem\\n\\n<Question color=\\"#1d85c2\\">\\n  <a href=\\"https://www.luogu.com.cn/problem/P3989\\">Problem link</a>\\n\\nGiven a string $S$ composed of the first $n$ lower-case letters, $S$ is a _factorial string_ if all the permutations of the first $n$ lower-case letters (there are $n!$ of them)\uff08\u5171$n!$\u79cd\uff09are subsequences (not necessarily consecutive) of $S$.\\n\\nGiven this definition, we can easily verify if a sequence is factorial by bashing, but it\'s too slow. Please design an algorithm that verifies if a string is factorial in 1 second.\\n\\n| Input constraints         | Memory limit | Execution time |\\n| ------------------------- | ------------ | -------------- |\\n| $\\\\|S\\\\|\\\\le 450$, $n\\\\le 26$ | 125MB        | 1.0s           |\\n\\n</Question>\\n\\n## Solution\\n\\nThe bashing solution is obviously enumerating all permutations and checking if they are subsequences. You get 30% of the score from this method, but the program is pretty meaningless, and the factorial time complexity prohibits further optimization, so we don\'t discuss further on this attempt.\\n\\nNow consider the rest 70% marks. For $n\\\\le 20$ we may consider an $\\\\mathcal{O}(2^n)$ algorithm. Since a full enumeration is not possible, we shall turn to state compression dynamic programming, and enumerate if a letter exists in the state. Since we need to find if all permutations of the first $n$ letters exist in $S$, we will keep track of the earliest occurence of $x$ in $S$.\\n\\nThe state transfer equation:\\n\\n$$\\n  \\\\begin{aligned}\\n    f(a,b,c,e)=\\\\max(&\\\\text{first }\\\\texttt{`e\'}\\\\text{ from }f(a,b,c), \\\\\\\\\\n    &\\\\text{first }\\\\texttt{`c\'}\\\\text{ from }f(a,b,e), \\\\\\\\\\n    &\\\\text{first }\\\\texttt{`b\'}\\\\text{ from }f(a,c,e), \\\\\\\\\\n    &\\\\text{first }\\\\texttt{`a\'}\\\\text{ from }f(b,c,e))\\n  \\\\end{aligned}\\n$$\\n\\nBut if every lookup is done by a loop, we would exceed the time limit and only get 50 points, so we need some preprocessing. We can conduct binary search after preprocessing, but for the sake of convenience, it may be better to maintain another array that marks the position of the next target letter at every position. The time for this is just $450\\\\times 26$.\\n\\nNow, consider the remaining marks. We notice that for large enough $n$, we can just output `\\"No\\"`. But how do we determine the exact threshold? If the construction is like $n=3\\\\implies S=\\\\mathtt{abcbab}$\uff0c$n=4\\\\implies S=\\\\mathtt{abcdcbabcdcba}$, the length of $S$ is about $n^2-n+1$\uff0c$n\\\\le 21$, but we weren\'t able to prove it rigorously. To be on the safer side, because the runtime is still acceptable for $n=22$, we choose to output `\\"No\\"` for $n\\\\ge 23$.\\n\\n## Program\\n\\n```cpp\\n#include <iostream>\\n\\nusing namespace std;\\n\\nint main(){\\n    int t;\\n    cin >> t;\\n    while (t--) {\\n        int n;\\n        cin >> n;\\n        string s;\\n        cin >> s;\\n        if (n >= 23) {\\n            cout << \\"NO\\" << endl;\\n        } else {\\n            short NEXT[26][450];\\n            for (int i = s.length() - 1; i >= 0; i--) {\\n                if (i == s.length() - 1) {\\n                    for (int j = 0; j < 26; j++)\\n                        NEXT[j][i] = -1;\\n                } else {\\n                    for (int j = 0; j < 26; j++)\\n                        NEXT[j][i] = NEXT[j][i + 1];\\n                }\\n                NEXT[s[i] - \'a\'][i] = i;\\n            }\\n            short *f = new short[1 << n];\\n            for (int i = 0; i < (1 << n); i++) {\\n                f[i] = 0;\\n                for (int j = 0; (1 << j) <= i; j++) {\\n                    if (i & (1 << j)) {\\n                        if (NEXT[j][f[i - (1 << j)]] == -1) {\\n                            cout << \\"NO\\" << endl;\\n                            return 0;\\n                        }\\n                        f[i] = max(f[i], NEXT[j][f[i - (1 << j)]]);\\n                    }\\n                }\\n            }\\n            cout << \\"YES\\" << endl;\\n        }\\n    }\\n}\\n```"},{"id":"/2020/10/10/algorithm1","metadata":{"permalink":"/en/blog/2020/10/10/algorithm1","source":"@site/i18n/en/docusaurus-plugin-content-blog/2020-10-10-algorithm1.mdx","title":"Fibonacci sequence","description":"This is the first activity of Computerization algorithm team. We introduced the method to find the $n$th term of the Fibonacci sequence, which mainly uses matrix exponentiation.","date":"2020-10-10T00:00:00.000Z","formattedDate":"October 10, 2020","tags":[{"label":"algorithm","permalink":"/en/blog/tags/algorithm"}],"readingTime":2.38,"hasTruncateMarker":true,"authors":[{"name":"Josh Cena","title":"\u4fe1\u606f\u5316\u793e 2022 \u5c4a\u793e\u957f","url":"https://github.com/Josh-Cena","imageURL":"https://github.com/Josh-Cena.png","key":"josh-cena"}],"frontMatter":{"title":"Fibonacci sequence","authors":"josh-cena","tags":["algorithm"]},"unlisted":false,"prevItem":{"title":"Factorial string","permalink":"/en/blog/2020/11/04/algorithm3"},"nextItem":{"title":"Git usage guide: understanding working principles of Git","permalink":"/en/blog/2020/09/23/git-usage"}},"content":"This is the first activity of Computerization algorithm team. We introduced the method to find the $n$th term of the Fibonacci sequence, which mainly uses matrix exponentiation.\\n\\n\x3c!--truncate--\x3e\\n\\nexport const Question = ({ children, color }) => (\\n  <div\\n    style={{\\n      backgroundColor: color,\\n      borderRadius: \\"10px\\",\\n      color: \\"#fff\\",\\n      padding: \\"1em\\",\\n      marginBottom: \\"1em\\",\\n      marginTop: \\"1em\\",\\n    }}>\\n    {children}\\n  </div>\\n);\\n\\n## Problem\\n\\n<Question color=\\"#1d85c2\\">\\n  The Fibonacci sequence:\\n\\n$$\\nF_{n}=\\n\\\\begin{cases}\\n  0,&n=0\\\\\\\\\\n  1,&n=1\\\\\\\\\\n  F_{n-2}+F_{n-1},&n>1\\n\\\\end{cases}\\n$$\\n\\nGiven $n$, find $F_{n}\\\\text{ mod }10^9+7$\u3002\\n\\n| Input constraints   | Memory limit | Execution time |\\n| ------------------- | ------------ | -------------- |\\n| $0\\\\le n\\\\le 10^{19}$ | 64MB         | 1.0s           |\\n\\n</Question>\\n\\n## Solution\\n\\nThe input size of $10^{19}$ obviously prohibits any attempt to solve it with loops. Is there a better way than a simple $\\\\mathcal{O}(n)$? It turns out that with **matrix exponentiation**, we can achieve $\\\\mathcal{O}(\\\\log n)$. We observe that:\\n\\n$$\\\\begin{pmatrix}F_{n+1}\\\\\\\\F_{n+2}\\\\end{pmatrix}=\\\\begin{pmatrix}F_{n+1}\\\\\\\\F_{n}+F_{n+1}\\\\end{pmatrix}=\\\\begin{pmatrix}0&1\\\\\\\\1&1\\\\end{pmatrix}\\\\begin{pmatrix}F_{n}\\\\\\\\F_{n+1}\\\\end{pmatrix}$$\\n\\nThis step is applicable to all recursive sequences, so it should be easily reached for an experienced candidate. Generally, for $F_{n+2}=aF_{n}+bF_{n+1}$, we have\\n\\n$$\\\\begin{pmatrix}F_{n+1}\\\\\\\\F_{n+2}\\\\end{pmatrix}=\\\\begin{pmatrix}F_{n+1}\\\\\\\\aF_{n}+bF_{n+1}\\\\end{pmatrix}=\\\\begin{pmatrix}0&1\\\\\\\\a&b\\\\end{pmatrix}\\\\begin{pmatrix}F_{n}\\\\\\\\F_{n+1}\\\\end{pmatrix}$$\\n\\nFrom the recursive definition,\\n\\n$$\\\\begin{pmatrix}F_{n+m}\\\\\\\\F_{n+m+1}\\\\end{pmatrix}=\\\\begin{pmatrix}0&1\\\\\\\\1&1\\\\end{pmatrix}^m\\\\begin{pmatrix}F_{n}\\\\\\\\F_{n+1}\\\\end{pmatrix}$$\\n\\nSubstituting $n=0$,\\n\\n$$\\\\begin{pmatrix}F_{m}\\\\\\\\F_{m+1}\\\\end{pmatrix}=\\\\begin{pmatrix}0&1\\\\\\\\1&1\\\\end{pmatrix}^m\\\\begin{pmatrix}F_0\\\\\\\\F_1\\\\end{pmatrix}$$\\n\\nNow the problem is transformed into finding the matrix raised to the $m$th power. If $m=2^0a_0+2^1a_1+2^2a_2+\\\\dots$ (representation in binary), then\\n\\n$$\\\\begin{pmatrix}0&1\\\\\\\\1&1\\\\end{pmatrix}^m=\\\\left(\\\\begin{pmatrix}0&1\\\\\\\\1&1\\\\end{pmatrix}^{1}\\\\right)^{a_0}\\\\times \\\\left(\\\\begin{pmatrix}0&1\\\\\\\\1&1\\\\end{pmatrix}^{2}\\\\right)^{a_1}\\\\times \\\\left(\\\\begin{pmatrix}0&1\\\\\\\\1&1\\\\end{pmatrix}^{4}\\\\right)^{a_2}\\\\dots$$\\n\\nThe $2^k$th powers of the original matrix can, in fact, be preprocessed. When $m<10^{19}$, $k<\\\\log_2 10^{19}<64$, so we only need to store at most 63 matrices. In addition,\\n\\n$$\\\\begin{pmatrix}0&1\\\\\\\\1&1\\\\end{pmatrix}^{2^k}=\\\\begin{pmatrix}0&1\\\\\\\\1&1\\\\end{pmatrix}^{2^{k-1}}\\\\times \\\\begin{pmatrix}0&1\\\\\\\\1&1\\\\end{pmatrix}^{2^{k-1}}$$\\n\\nwhich implies that the powers can be attained within $\\\\mathcal{O}(\\\\log m)$ time. This is the idea of fast matrix exponentiation: compute all $2^k$th powers, and put those needed together.\\n\\n## Program\\n\\nBelow is the C++ code, where the most intractable part is probably implementation of matrix multiplication:\\n\\n```cpp\\n#include <iostream>\\n#include <cmath>\\n\\nusing namespace std;\\n\\nstruct mat {\\n    unsigned long long a[4];\\n    mat operator *(mat o) {\\n        mat t;\\n        t.a[0] = (this->a[0] * o.a[0] + this->a[1] * o.a[2]) % 1000000007;\\n        t.a[1] = (this->a[0] * o.a[1] + this->a[1] * o.a[3]) % 1000000007;\\n        t.a[2] = (this->a[2] * o.a[0] + this->a[3] * o.a[2]) % 1000000007;\\n        t.a[3] = (this->a[2] * o.a[1] + this->a[3] * o.a[3]) % 1000000007;\\n        return t;\\n    }\\n};\\n\\n// Preprocessed matrices raised to the 2^k power\\nmat mat_pow[64];\\n\\nint fib(unsigned long long k) {\\n    // Temporary matrix; each time multiply it by some term in mat_pow\\n    mat tmp;\\n    tmp.a[0] = 1;\\n    tmp.a[1] = 0;\\n    tmp.a[2] = 0;\\n    tmp.a[3] = 1;\\n    for (int i = 0; i < 64; i++) {\\n        // If a_i is 1\\n        if (k & (1ull << i)) {\\n            tmp = tmp * mat_pow[i];\\n        }\\n    }\\n    return tmp.a[1];\\n}\\n\\nint main() {\\n    mat_pow[0].a[0] = 0;\\n    mat_pow[0].a[1] = 1;\\n    mat_pow[0].a[2] = 1;\\n    mat_pow[0].a[3] = 1;\\n    for (int i = 1; i < 64; i++) {\\n        mat_pow[i] = mat_pow[i-1] * mat_pow[i-1];\\n    }\\n    unsigned long long n;\\n    cin >> n;\\n    cout << fib(n) << endl;\\n    return 0;\\n}\\n```\\n\\nThe formulae for matrix multiplication are:\\n\\n$$\\\\begin{pmatrix}a_0&a_1\\\\\\\\a_2&a_3\\\\end{pmatrix}\\\\times\\\\begin{pmatrix}b_0&b_1\\\\\\\\b_2&b_3\\\\end{pmatrix}=\\\\begin{pmatrix}a_0b_0+a_1b_2&a_0b_1+a_1b_3\\\\\\\\a_2b_0+a_3b_2&a_2b_1+a_3b_3\\\\end{pmatrix}$$\\n\\n$$\\\\begin{pmatrix}a_0&a_1\\\\\\\\a_2&a_3\\\\end{pmatrix}\\\\times\\\\begin{pmatrix}b_0\\\\\\\\b_1\\\\end{pmatrix}=\\\\begin{pmatrix}a_0b_0+a_1b_1\\\\\\\\a_2b_0+a_3b_1\\\\end{pmatrix}$$"},{"id":"/2020/09/23/git-usage","metadata":{"permalink":"/en/blog/2020/09/23/git-usage","source":"@site/i18n/en/docusaurus-plugin-content-blog/2020-09-23-git-usage.md","title":"Git usage guide: understanding working principles of Git","description":"This article is migrated from the first section of the README.md file in the new member practice commit repo.","date":"2020-09-23T00:00:00.000Z","formattedDate":"September 23, 2020","tags":[{"label":"git","permalink":"/en/blog/tags/git"},{"label":"guide","permalink":"/en/blog/tags/guide"}],"readingTime":7.025,"hasTruncateMarker":true,"authors":[{"name":"Josh Cena","title":"\u4fe1\u606f\u5316\u793e 2022 \u5c4a\u793e\u957f","url":"https://github.com/Josh-Cena","imageURL":"https://github.com/Josh-Cena.png","key":"josh-cena"}],"frontMatter":{"title":"Git usage guide: understanding working principles of Git","authors":"josh-cena","tags":["git","guide"]},"unlisted":false,"prevItem":{"title":"Fibonacci sequence","permalink":"/en/blog/2020/10/10/algorithm1"},"nextItem":{"title":"Welcome","permalink":"/en/blog/2020/09/02/welcome"}},"content":"> This article is migrated from the first section of the README.md file in the [new member practice commit repo](https://github.com/Computerization/New-member-practice-commit).\\n\\nYou can either add a file via Graphical-User-Interface(GUI)-powered GitHub Desktop or command line. You may begin with GUI, but you will someday get into command lines since they offer better control over your repo. Furthermore, Visual Studio Code users can try out the built-in source control.\\n\\nWe find it necessary to tell you what you are actually doing each step instead of having you follow the written instructions mechanically. This especially helps since things hardly go as beautifully as the tutorial expects. This section assumes no prior knowledge of any git operations.\\n\\n\x3c!--truncate--\x3e\\n\\nYou can understand git as a version control system. It keeps track of how each file has been created, modified, and deleted, and the repository owner can switch to any saved version (commit), just like the save files in a game.\\n\\n## Basic operations: clone, branch, commit, push, pull request\\n\\nSuppose there\'s a repository out on GitHub named `Hello`, created by Alice to host perhaps _the_ most famous piece of code in history. Its directory looks like this:\\n\\n```bash\\n.\\n\u251c\u2500\u2500 Hello.cpp\\n\u2502\\n\u251c\u2500\u2500 Contributors.txt\\n\u2502\\n\u2514\u2500\u2500 README.md\\n```\\n\\n```cpp\\n// Hello.cpp\\n#include <iostream>\\nusing namespace std;\\nint main() {\\n  cout << \\"Hello world!\\" << endl;\\n}\\n```\\n\\n```bash\\n// Contributors.txt\\nXiaoLi\\n```\\n\\n```markdown\\n// README.md\\n\\n# Hello world\\n\\nA piece of C++ code that prints `Hello world!`\\n```\\n\\nView each commmit as a snapshot of the entire repo. In fact it\'s much more lightweight than a complete copy, but in essence it contains all the information at that moment. And this version can be viewed as commit `C0`. (Every commit has a unique hash that\'s too long to be human-readable, so `C0` will suffice.) We also call it the `master` branch. _A branch is a series of commits that form a linear relationship of succession, with the `master` branch being the \\"main\\" branch. In essence, it\'s a pointer to a commit._\\n\\n<img alt=\\"Git tree 1\\" src=\'/img/blog/2020-09-23/Git-tree-1.png\' />\\n\\nBob the linguist finds this repo. He finds great interest in it, but his strong objection to the clich\xe9d `Hello world!` motivates him to make a contribution. To do this, he needs to download this folder (or repository, as people call it) first. This is basically what **_cloning_** does.\\n\\nAfter he has a complete copy of the code on his own machine, Bob sets out to make edits. He updates all three files:\\n\\n```cpp\\n// Hello.cpp\\n#include <iostream>\\nusing namespace std;\\nint main() {\\n  cout << \\"Bonjour le monde!\\" << endl;\\n}\\n```\\n\\n```bash\\n// Contributors.txt\\nXiaoLi\\nXiaoMing\\n```\\n\\n```markdown\\n// README.md\\n\\n# Hello world\\n\\nA piece of C++ code that prints `Bonjour le monde!`\\n```\\n\\nAnd now he needs to send it back to GitHub, as his instinct tells him. This is done by directly making a commit. However there\'s a critical problem here: _Alice has zero control over Bob\'s action_. In fact, most public repos (including Computerization\'s) restrict people from commiting directly to `master`, because there\'s no point of authentication. Once the commit is made, Alice would be back and surprisedly find her code becoming French. And it\'s bad practice anyways: **In any collaborative repository, never commit directly to master.** ~~(Unless you are resigning in a week)~~ There\'s another problem with commiting to `master`, which we will shortly see.\\n\\nSo to fix this problem, Bob **_creates a new branch_**, and names it `Bob/change-output-language`. We may see this as Bob working on a separate but identical folder, and anything he does will not affect `master`. This not only clarifies his purpose, identifies his position as an author, but also prevents conflict and/or confusion.\\n\\nHe made the said changes. But then he remembered another code of honor: **one commit should only serve one purpose**. Looking back at his changes, he believes that changing the language and adding his name in the `Contributors.txt` should be separate things (the difference is minute here, but in real projects it gets obvious). Therefore he **_makes two commits_** called `Change output to French` and `Add Bob\'s name to Contributors.txt`, which will be neatly given hashes `C1` and `C2`. Note he did not necessarily work on them sequentially, but git treats `C2` as a successor of `C1` since it\'s a more recent commit. Now the branch `Bob/change-output-language` refers to the commit `C2`.\\n\\n<img alt=\\"Git tree 2\\" src=\'/img/blog/2020-09-23/Git-tree-2.png\' />\\n\\nAt this point his changes have remained local -- no one can see it on the GitHub page. So then he **_publishes the branch and pushes it to the origin_**. This uploads this branch, `Bob/change-output-language`, with all the commits it contains, to the GitHub remote.\\n\\nAfter he has published the branch, any further commits he makes on this branch will be automatically synchronized with GitHub as well.\\n\\nDirectly after, he **_makes a pull request_** to ask the code owner (a.k.a. Alice) to merge this branch. _When a branch is merged, all the changes will now be reflected in `master`._\\n\\nThis sounds really simple when there\'s only one branch, because git simply adds everything to `master` when all commits are successors of `master`, which is now `C0`. So Git moves the `C0` pointer:\\n\\n<img alt=\\"Git tree 3\\" src=\'/img/blog/2020-09-23/Git-tree-3.png\' />\\n\\nAnd in fact, above is all for new git users to understand. But as future GitHub admins, you deserve to think a little deeper.\\n\\n## Resolving conflicts\\n\\nSo to make thing more fun, Cindy the orthodox comes simultaneously with Bob. Outraged by Alice dropping the `return 0` in the cpp file, she decides to fix it. Similarly, she creates a new branch `Cindy/improve-code-style` from `master`, which at this point is still `C0`. The files are changed as:\\n\\n```cpp\\n// Hello.cpp\\n#include <iostream>\\nusing namespace std;\\nint main() {\\n  cout << \\"Hello world!\\" << endl;\\n  return 0;\\n}\\n```\\n\\n```bash\\n// Contributors.txt\\nXiaoLi\\nXiaoHong\\n```\\n\\n```markdown\\n// README.md\\n\\n# Hello world\\n\\nA piece of C++ code that prints `Hello world!`\\n```\\n\\nShe publishes the branch and opens a pull request.\\n\\n<img alt=\\"Git tree 4\\" src=\'/img/blog/2020-09-23/Git-tree-4.png\' />\\n\\nAlice, after her tea break, comes back to find the two pull requests. She happily merges Bob\'s one;\\n\\n<img alt=\\"Git tree 5\\" src=\'/img/blog/2020-09-23/Git-tree-5.png\' />\\n\\nbut then Cindy\'s one she can not merge on click of a button. GitHub throws a warning, telling her there\'s a conflict with `master`. She has to resolve the conflict manually, because git didn\'t know which version to keep when they are made parallelly. The resolving page shows something like:\\n\\n```cpp\\n// Hello.cpp\\n #include <iostream>\\n using namespace std;\\n int main() {\\n <<<<<<< master\\n   cout << \\"Bonjour le monde!\\" << endl;\\n =======\\n   cout << \\"Hello world!\\" << endl;\\n   return 0;\\n >>>>>>> XiaoHong/improve-code-style\\n }\\n```\\n\\n```bash\\n// Contributors.txt\\n XiaoLi\\n <<<<<<< master\\n XiaoMing\\n =======\\n XiaoHong\\n >>>>>>> XiaoHong/improve-code-style\\n```\\n\\nNote that the README.md file needs no resolution because only Bob had made a change; git is smart enough to realize that. But the above issues are pressing. How to resolve them are pretty apparent to humans like Alice, though, so she quickly fixed these, and merged Cindy\'s branch with no conflict. The files are now (`C4`):\\n\\n```cpp\\n// Hello.cpp\\n#include <iostream>\\nusing namespace std;\\nint main() {\\n  cout << \\"Bonjour le monde!\\" << endl;\\n  return 0;\\n}\\n```\\n\\n```bash\\n// Contributors.txt\\nXiaoLi\\nXiaoMing\\nXiaoHong\\n```\\n\\n```markdown\\n// README.md\\n\\n# Hello world\\n\\nA piece of C++ code that prints `Bonjour le monde!`\\n```\\n\\nAnd to merge a branch into a branch that is not a successor, Git will create a new commit:\\n\\n<img alt=\\"Git tree 6\\" src=\'/img/blog/2020-09-23/Git-tree-6.png\' />\\n\\nAnd Alice, Bob, and Cindy are happy about their successful collaboration over GitHub on an open-source project.\\n\\nTo understand more about git and its tree structure (as already implied above), check this out: [Learn Git Branching](https://learngitbranching.js.org)\\n\\n## Further Reading\\n\\nTo discover what happens when you `pull`, `push`, `commit`, `add`, or `checkout`, you can refer to the following sites:\\n\\n- [Git SCM - Getting Started: Git Basics](https://git-scm.com/book/en/v1/Getting-Started-Git-Basics)\\n- [Git SCM - Git Branching: Branches in a Nutshell](https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell)\\n- [Git SCM - Git Branching: Branching Workflows](https://git-scm.com/book/en/v2/Git-Branching-Branching-Workflows)\\n- [Stack Overflow - What\'s the difference between HEAD, working tree and index, in Git?](https://stackoverflow.com/questions/3689838/whats-the-difference-between-head-working-tree-and-index-in-git)\\n- [Understanding Git: Data Model](https://hackernoon.com/https-medium-com-zspajich-understanding-git-data-model-95eb16cc99f5)\\n- [Understanding Git: Branching](https://hackernoon.com/understanding-git-branching-2662f5882f9)\\n- [Understanding Git: Index](https://hackernoon.com/understanding-git-index-4821a0765cf)\\n\\nAlternatively, if you don\'t like reading long texts, you can watch this YouTube video (about 82-min long):\\n\\n- [\\\\[VIDEO\\\\] Introduction to Git with Scott Chacon of GitHub](https://www.youtube.com/watch?v=ZDR433b0HJY)\\n\\nOr try the commands out on this visualized webpage:\\n\\n- [Learn Git Branching](https://learngitbranching.js.org)"},{"id":"/2020/09/02/welcome","metadata":{"permalink":"/en/blog/2020/09/02/welcome","source":"@site/i18n/en/docusaurus-plugin-content-blog/2020-09-02-welcome.md","title":"Welcome","description":"Computerization welcome all new members of class 2020!","date":"2020-09-02T00:00:00.000Z","formattedDate":"September 2, 2020","tags":[{"label":"welcome","permalink":"/en/blog/tags/welcome"}],"readingTime":0.39,"hasTruncateMarker":false,"authors":[{"name":"Josh Cena","title":"\u4fe1\u606f\u5316\u793e 2022 \u5c4a\u793e\u957f","url":"https://github.com/Josh-Cena","imageURL":"https://github.com/Josh-Cena.png","key":"josh-cena"}],"frontMatter":{"title":"Welcome","authors":"josh-cena","tags":["welcome"]},"unlisted":false,"prevItem":{"title":"Git usage guide: understanding working principles of Git","permalink":"/en/blog/2020/09/23/git-usage"}},"content":"**Computerization** welcome all new members of class 2020!\\n\\nAt Computerization, you can:\\n\\n- Join in the development of the new platform [Enspire](https://github.com/Computerization/Enspire);\\n- Research on artificial intelligence (e.g. neural networks, machine learning);\\n- Take part in algorithm contests (e.g. LeetCode weekly contest);\\n- Learn front-end / back-end technology and web designing, experience web development in the real world;\\n- ...\\n\\nWe hope that all new members can learn with joy, self-improve, and meet peers with the same interest."}]}')}}]);